<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2014r2sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tbf="http://www.altova.com/MapForce/UDF/tbf" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:n1="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" exclude-result-prefixes="tbf agt xs fn">
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template match="/">
		<Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2">
					<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'urn:oasis:names:specification:ubl:schema:xsd:Invoice-2 C:/UBL/xsd/maindoc/UBL-Invoice-2.1.xsd'"/>
			<xsl:attribute name="xmlns:xsd" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'urn:oasis:names:specification:ubl:schema:xsd:Invoice-2 C:/UBL/xsd/maindoc/UBL-Invoice-2.1.xsd'"/>
			<xsl:for-each select="n1:Invoice">
				<xsl:variable name="var19_current" as="node()" select="."/>
				<xsl:variable name="var1_Delivery" as="node()*" select="cac:Delivery"/>
				<xsl:variable name="var2_TaxTotal" as="node()*" select="cac:TaxTotal"/>
				<xsl:variable name="var3_resultof_first" as="node()" select="cac:AccountingCustomerParty"/>
				<xsl:variable name="var4_resultof_first" as="node()" select="cbc:ID"/>
				<xsl:variable name="var5_resultof_first" as="node()" select="cac:AccountingSupplierParty"/>
				<xsl:variable name="var6_resultof_first" as="node()" select="cac:LegalMonetaryTotal"/>
				<xsl:variable name="var7_resultof_any" as="xs:boolean" select="fn:exists($var1_Delivery[fn:exists(cac:DeliveryLocation[fn:exists(cac:Address[fn:exists(cbc:PostalZone)])])])"/>
				<xsl:variable name="var8_resultof_any" as="xs:boolean" select="fn:exists($var1_Delivery[fn:exists(cac:DeliveryLocation[fn:exists(cac:Address[fn:exists(cbc:CityName)])])])"/>
				<xsl:variable name="var9_resultof_any" as="xs:boolean" select="fn:exists($var1_Delivery[fn:exists(cac:DeliveryLocation[fn:exists(cac:Address[fn:exists(cbc:StreetName)])])])"/>
							<xsl:for-each select="cbc:UBLVersionID">
					<cbc:UBLVersionID>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:UBLVersionID>
				</xsl:for-each>
				<xsl:for-each select="cbc:CustomizationID">
					<cbc:CustomizationID>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:CustomizationID>
				</xsl:for-each>
				<xsl:for-each select="cbc:ProfileID">
					<cbc:ProfileID>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:ProfileID>
				</xsl:for-each>
				<xsl:for-each select="cbc:ProfileExecutionID">
					<cbc:ProfileExecutionID>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:ProfileExecutionID>
				</xsl:for-each>
				<cbc:ID>
					<xsl:sequence select="($var4_resultof_first/@node(), $var4_resultof_first/node())"/>
				</cbc:ID>
				<xsl:for-each select="cbc:CopyIndicator">
					<cbc:CopyIndicator>
						<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
					</cbc:CopyIndicator>
				</xsl:for-each>
				<xsl:for-each select="cbc:UUID">
					<cbc:UUID>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:UUID>
				</xsl:for-each>
				<cbc:IssueDate>
					<xsl:sequence select="xs:string(xs:date(fn:string(cbc:IssueDate)))"/>
				</cbc:IssueDate>
				<xsl:for-each select="cbc:IssueTime">
					<cbc:IssueTime>
						<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
					</cbc:IssueTime>
				</xsl:for-each>
				<xsl:for-each select="cbc:DueDate">
					<cbc:DueDate>
						<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
					</cbc:DueDate>
				</xsl:for-each>
				<xsl:for-each select="cbc:InvoiceTypeCode">
					<cbc:InvoiceTypeCode>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:InvoiceTypeCode>
				</xsl:for-each>
				<xsl:for-each select="cbc:Note">
					<cbc:Note>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:Note>
				</xsl:for-each>
				<xsl:for-each select="cbc:TaxPointDate">
					<cbc:TaxPointDate>
						<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
					</cbc:TaxPointDate>
				</xsl:for-each>
				<xsl:for-each select="cbc:DocumentCurrencyCode">
					<cbc:DocumentCurrencyCode>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:DocumentCurrencyCode>
				</xsl:for-each>
				<xsl:for-each select="cbc:PricingCurrencyCode">
					<cbc:PricingCurrencyCode>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:PricingCurrencyCode>
				</xsl:for-each>
				<xsl:for-each select="cbc:PaymentCurrencyCode">
					<cbc:PaymentCurrencyCode>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:PaymentCurrencyCode>
				</xsl:for-each>
				<xsl:for-each select="cbc:PaymentAlternativeCurrencyCode">
					<cbc:PaymentAlternativeCurrencyCode>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:PaymentAlternativeCurrencyCode>
				</xsl:for-each>
				<xsl:for-each select="cbc:AccountingCostCode">
					<cbc:AccountingCostCode>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:AccountingCostCode>
				</xsl:for-each>
				<xsl:for-each select="cbc:AccountingCost">
					<cbc:AccountingCost>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:AccountingCost>
				</xsl:for-each>
				<xsl:for-each select="cbc:LineCountNumeric">
					<cbc:LineCountNumeric>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:LineCountNumeric>
				</xsl:for-each>
				<xsl:for-each select="cbc:BuyerReference">
					<cbc:BuyerReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:BuyerReference>
				</xsl:for-each>
				<xsl:for-each select="cac:InvoicePeriod">
					<cac:InvoicePeriod>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:InvoicePeriod>
				</xsl:for-each>
				<xsl:for-each select="cac:OrderReference">
					<cac:OrderReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:OrderReference>
				</xsl:for-each>
				<xsl:for-each select="cac:BillingReference">
					<cac:BillingReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:BillingReference>
				</xsl:for-each>
				<xsl:for-each select="cac:DespatchDocumentReference">
					<cac:DespatchDocumentReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:DespatchDocumentReference>
				</xsl:for-each>
				<xsl:for-each select="cac:ReceiptDocumentReference">
					<cac:ReceiptDocumentReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:ReceiptDocumentReference>
				</xsl:for-each>
				<xsl:for-each select="cac:StatementDocumentReference">
					<cac:StatementDocumentReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:StatementDocumentReference>
				</xsl:for-each>
				<xsl:for-each select="cac:OriginatorDocumentReference">
					<cac:OriginatorDocumentReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:OriginatorDocumentReference>
				</xsl:for-each>
				<xsl:for-each select="cac:ContractDocumentReference">
					<cac:ContractDocumentReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:ContractDocumentReference>
				</xsl:for-each>
				<xsl:for-each select="cac:AdditionalDocumentReference">
					<cac:AdditionalDocumentReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:AdditionalDocumentReference>
				</xsl:for-each>
				<xsl:for-each select="cac:ProjectReference">
					<cac:ProjectReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:ProjectReference>
				</xsl:for-each>
				<xsl:for-each select="cac:Signature">
					<cac:Signature>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:Signature>
				</xsl:for-each>
				<cac:AccountingSupplierParty>
					<xsl:sequence select="($var5_resultof_first/@node(), $var5_resultof_first/node())"/>
				</cac:AccountingSupplierParty>
				<cac:AccountingCustomerParty>
					<xsl:sequence select="($var3_resultof_first/@node(), $var3_resultof_first/node())"/>
				</cac:AccountingCustomerParty>
				<xsl:for-each select="cac:PayeeParty">
					<cac:PayeeParty>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:PayeeParty>
				</xsl:for-each>
				<xsl:for-each select="cac:BuyerCustomerParty">
					<cac:BuyerCustomerParty>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:BuyerCustomerParty>
				</xsl:for-each>
				<xsl:for-each select="cac:SellerSupplierParty">
					<cac:SellerSupplierParty>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:SellerSupplierParty>
				</xsl:for-each>
				<xsl:for-each select="cac:TaxRepresentativeParty">
					<cac:TaxRepresentativeParty>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:TaxRepresentativeParty>
				</xsl:for-each>
				<cac:Delivery>
					<xsl:for-each select="$var1_Delivery/cbc:ActualDeliveryDate">
						<cbc:ActualDeliveryDate>
							<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
						</cbc:ActualDeliveryDate>
					</xsl:for-each>
					<cac:DeliveryLocation>
						<xsl:for-each select="$var1_Delivery/cac:DeliveryLocation/cbc:ID">
							<cbc:ID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:ID>
						</xsl:for-each>
						<cac:Address>
							<xsl:if test="(fn:not($var9_resultof_any) or fn:exists($var1_Delivery[fn:exists(cac:DeliveryLocation[fn:exists(cac:Address[fn:exists(cbc:StreetName)])])]))">
								<cbc:StreetName>
									<xsl:choose>
										<xsl:when test="$var9_resultof_any">
											<xsl:variable name="var10_resultof_map" as="xs:string*">
												<xsl:for-each select="$var1_Delivery/cac:DeliveryLocation/cac:Address/cbc:StreetName">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var10_resultof_map return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="'NA'"/>
										</xsl:otherwise>
									</xsl:choose>
								</cbc:StreetName>
							</xsl:if>
							<xsl:for-each select="$var1_Delivery/cac:DeliveryLocation/cac:Address/cbc:AdditionalStreetName">
								<cbc:AdditionalStreetName>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:AdditionalStreetName>
							</xsl:for-each>
							<xsl:if test="(fn:not($var8_resultof_any) or fn:exists($var1_Delivery[fn:exists(cac:DeliveryLocation[fn:exists(cac:Address[fn:exists(cbc:CityName)])])]))">
								<cbc:CityName>
									<xsl:choose>
										<xsl:when test="$var8_resultof_any">
											<xsl:variable name="var11_resultof_map" as="xs:string*">
												<xsl:for-each select="$var1_Delivery/cac:DeliveryLocation/cac:Address/cbc:CityName">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var11_resultof_map return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="'NA'"/>
										</xsl:otherwise>
									</xsl:choose>
								</cbc:CityName>
							</xsl:if>
							<xsl:if test="(fn:not($var7_resultof_any) or fn:exists($var1_Delivery[fn:exists(cac:DeliveryLocation[fn:exists(cac:Address[fn:exists(cbc:PostalZone)])])]))">
								<cbc:PostalZone>
									<xsl:choose>
										<xsl:when test="$var7_resultof_any">
											<xsl:variable name="var12_resultof_map" as="xs:string*">
												<xsl:for-each select="$var1_Delivery/cac:DeliveryLocation/cac:Address/cbc:PostalZone">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:sequence select="xs:string(fn:string-join(for $x in $var12_resultof_map return xs:string($x), ' '))"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="'NA'"/>
										</xsl:otherwise>
									</xsl:choose>
								</cbc:PostalZone>
							</xsl:if>
						</cac:Address>
					</cac:DeliveryLocation>
				</cac:Delivery>
				<xsl:for-each select="cac:DeliveryTerms">
					<cac:DeliveryTerms>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:DeliveryTerms>
				</xsl:for-each>
				<xsl:for-each select="cac:PaymentMeans">
					<cac:PaymentMeans>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:PaymentMeans>
				</xsl:for-each>
				<xsl:for-each select="cac:PaymentTerms">
					<cac:PaymentTerms>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:PaymentTerms>
				</xsl:for-each>
				<xsl:for-each select="cac:PrepaidPayment">
					<cac:PrepaidPayment>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:PrepaidPayment>
				</xsl:for-each>
				<xsl:for-each select="cac:AllowanceCharge">
					<cac:AllowanceCharge>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:AllowanceCharge>
				</xsl:for-each>
				<xsl:for-each select="cac:PricingExchangeRate">
					<cac:PricingExchangeRate>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:PricingExchangeRate>
				</xsl:for-each>
				<xsl:for-each select="cac:PaymentExchangeRate">
					<cac:PaymentExchangeRate>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:PaymentExchangeRate>
				</xsl:for-each>
				<xsl:for-each select="cac:PaymentAlternativeExchangeRate">
					<cac:PaymentAlternativeExchangeRate>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:PaymentAlternativeExchangeRate>
				</xsl:for-each>
				<xsl:for-each select="$var2_TaxTotal">
					<cac:TaxTotal>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:TaxTotal>
				</xsl:for-each>
				<xsl:for-each select="cac:TaxExchangeRate">
					<xsl:variable name="var18_current" as="node()" select="."/>
					<xsl:variable name="var15_val" as="node()+" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:n1="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2">
						<xsl:for-each select="$var2_TaxTotal">
							<xsl:variable name="var13_current" as="node()" select="."/>
							<xsl:for-each select="$var18_current/cbc:CalculationRate">
								<cbc:TaxAmount>
									<xsl:for-each select="$var19_current/cbc:TaxCurrencyCode">
										<xsl:attribute name="currencyID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:sequence select="xs:string((xs:decimal(fn:string($var13_current/cbc:TaxAmount)) * xs:decimal(fn:string(.))))"/>
								</cbc:TaxAmount>
							</xsl:for-each>
						</xsl:for-each>
						<TaxSubtotal xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2">
							<xsl:for-each select="$var2_TaxTotal/cac:TaxSubtotal/cbc:TaxableAmount">
								<xsl:variable name="var14_current" as="node()" select="."/>
								<xsl:for-each select="$var18_current/cbc:CalculationRate">
									<cbc:TaxableAmount>
										<xsl:attribute name="currencyID" namespace="" select="fn:string($var18_current/cbc:TargetCurrencyCode)"/>
										<xsl:sequence select="xs:string((xs:decimal(fn:string($var14_current)) * xs:decimal(fn:string(.))))"/>
									</cbc:TaxableAmount>
								</xsl:for-each>
							</xsl:for-each>
							<xsl:for-each select="$var2_TaxTotal/cac:TaxSubtotal/cbc:TransactionCurrencyTaxAmount">
								<cbc:TaxAmount>
									<xsl:attribute name="currencyID" namespace="" select="fn:string($var18_current/cbc:TargetCurrencyCode)"/>
									<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
								</cbc:TaxAmount>
							</xsl:for-each>
						</TaxSubtotal>
					</xsl:variable>
					<cac:TaxTotal>
						<xsl:variable name="var16_create_TaxTotal" as="node()">
							<TaxTotal xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2">
								<xsl:sequence select="$var15_val"/>
							</TaxTotal>
						</xsl:variable>
						<xsl:for-each select="$var16_create_TaxTotal/cbc:TaxAmount">
							<cbc:TaxAmount>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:TaxAmount>
						</xsl:for-each>
						<xsl:variable name="var17_create_TaxTotal" as="node()">
							<TaxTotal xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2">
								<xsl:sequence select="$var15_val"/>
							</TaxTotal>
						</xsl:variable>
						<xsl:for-each select="$var17_create_TaxTotal/cac:TaxSubtotal">
							<cac:TaxSubtotal>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:TaxSubtotal>
						</xsl:for-each>
					</cac:TaxTotal>
				</xsl:for-each>
				<xsl:for-each select="cac:WithholdingTaxTotal">
					<cac:WithholdingTaxTotal>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:WithholdingTaxTotal>
				</xsl:for-each>
				<cac:LegalMonetaryTotal>
					<xsl:sequence select="($var6_resultof_first/@node(), $var6_resultof_first/node())"/>
				</cac:LegalMonetaryTotal>
				<xsl:for-each select="cac:InvoiceLine">
					<cac:InvoiceLine>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:InvoiceLine>
				</xsl:for-each>
			</xsl:for-each>
		</Invoice>
	</xsl:template>
</xsl:stylesheet>
