<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2014r2sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tbf="http://www.altova.com/MapForce/UDF/tbf" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:n1="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" exclude-result-prefixes="tbf agt xs fn">
	<xsl:template name="tbf:tbf1_SourceCurrencyCodeType">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@listID">
			<xsl:attribute name="listID" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@listAgencyID">
			<xsl:attribute name="listAgencyID" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@listAgencyName">
			<xsl:attribute name="listAgencyName" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@listName">
			<xsl:attribute name="listName" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@listVersionID">
			<xsl:attribute name="listVersionID" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@name">
			<xsl:attribute name="name" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@languageID">
			<xsl:attribute name="languageID" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@listURI">
			<xsl:attribute name="listURI" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@listSchemeURI">
			<xsl:attribute name="listSchemeURI" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:sequence select="fn:string($input)"/>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template name="agt:MapToUBL-Invoice-2_1_var133_function">
		<xsl:param name="val0" as="node()"/>
		<xsl:param name="par0" as="node()"/>
		<cac:TaxExchangeRate>
			<xsl:for-each select="$par0/cbc:SourceCurrencyCode">
				<cbc:SourceCurrencyCode>
					<xsl:attribute name="listID" select="'ISO4217'"/>
					<xsl:if test="fn:exists(@listAgencyID)">
						<xsl:attribute name="listAgencyID" select="fn:string(@listAgencyID)"/>
					</xsl:if>
					<xsl:if test="fn:exists(@listAgencyName)">
						<xsl:attribute name="listAgencyName" select="fn:string(@listAgencyName)"/>
					</xsl:if>
					<xsl:if test="fn:exists(@listName)">
						<xsl:attribute name="listName" select="fn:string(@listName)"/>
					</xsl:if>
					<xsl:if test="fn:exists(@listVersionID)">
						<xsl:attribute name="listVersionID" select="fn:string(@listVersionID)"/>
					</xsl:if>
					<xsl:if test="fn:exists(@name)">
						<xsl:attribute name="name" select="fn:string(@name)"/>
					</xsl:if>
					<xsl:if test="fn:exists(@languageID)">
						<xsl:attribute name="languageID" select="fn:string(@languageID)"/>
					</xsl:if>
					<xsl:if test="fn:exists(@listURI)">
						<xsl:attribute name="listURI" select="xs:string(xs:anyURI(fn:string(@listURI)))"/>
					</xsl:if>
					<xsl:if test="fn:exists(@listSchemeURI)">
						<xsl:attribute name="listSchemeURI" select="xs:string(xs:anyURI(fn:string(@listSchemeURI)))"/>
					</xsl:if>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:SourceCurrencyCode>
			</xsl:for-each>
			<xsl:for-each select="$par0/cbc:TargetCurrencyCode">
				<cbc:TargetCurrencyCode>
					<xsl:attribute name="listID" select="'ISO4217'"/>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:TargetCurrencyCode>
			</xsl:for-each>
			<xsl:variable name="var132_resultof_map" as="node()*">
				<xsl:for-each-group select="$val0/cac:TaxTotal" group-by="fn:string(cbc:TaxAmount/@currencyID)">
					<xsl:variable name="var131_resultof_group_items" as="item()+" select="current-group()"/>
					<xsl:variable name="var130_resultof_filter" as="node()*">
						<xsl:for-each select="$val0/cbc:DocumentCurrencyCode">
							<xsl:variable name="var129_current" as="node()" select="."/>
							<xsl:if test="fn:exists($var131_resultof_group_items[(fn:string($var129_current) = fn:string(cbc:TaxAmount/@currencyID))])">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:not(fn:exists($var130_resultof_filter))">
						<TaxTotal xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:n0="urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2" xmlns:n1="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:qdt="urn:oasis:names:specification:ubl:schema:xsd:QualifiedDataTypes-2" xmlns:sac="urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2" xmlns:sbc="urn:oasis:names:specification:ubl:schema:xsd:SignatureBasicComponents-2" xmlns:udt="urn:oasis:names:specification:ubl:schema:xsd:UnqualifiedDataTypes-2" xmlns:ccts-cct="urn:un:unece:uncefact:data:specification:CoreComponentTypeSchemaModule:2">
							<xsl:for-each select="current-group()">
								<cbc:TaxAmount>
									<xsl:sequence select="xs:string(xs:decimal(fn:string(cbc:TaxAmount)))"/>
								</cbc:TaxAmount>
							</xsl:for-each>
							<TaxSubtotal>
								<xsl:for-each select="current-group()/cac:TaxSubtotal">
									<cbc:TaxAmount>
										<xsl:attribute name="currencyID" namespace="" select="fn:string(cbc:TaxAmount/@currencyID)"/>
										<xsl:sequence select="xs:string(xs:decimal(fn:string(cbc:TaxAmount)))"/>
									</cbc:TaxAmount>
								</xsl:for-each>
							</TaxSubtotal>
						</TaxTotal>
					</xsl:if>
				</xsl:for-each-group>
			</xsl:variable>
			<xsl:for-each select="$var132_resultof_map/cbc:TaxAmount">
				<xsl:variable name="var128_current" as="node()" select="."/>
				<xsl:variable name="var127_resultof_map" as="node()*">
					<xsl:for-each-group select="$val0/cac:TaxTotal" group-by="fn:string(cbc:TaxAmount/@currencyID)">
						<xsl:variable name="var126_resultof_group_items" as="item()+" select="current-group()"/>
						<xsl:variable name="var125_resultof_filter" as="node()*">
							<xsl:for-each select="$val0/cbc:DocumentCurrencyCode">
								<xsl:variable name="var124_current" as="node()" select="."/>
								<xsl:if test="fn:exists($var126_resultof_group_items[(fn:string($var124_current) = fn:string(cbc:TaxAmount/@currencyID))])">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var125_resultof_filter)">
							<xsl:for-each select="current-group()">
								<TaxTotal xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:n0="urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2" xmlns:n1="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:qdt="urn:oasis:names:specification:ubl:schema:xsd:QualifiedDataTypes-2" xmlns:sac="urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2" xmlns:sbc="urn:oasis:names:specification:ubl:schema:xsd:SignatureBasicComponents-2" xmlns:udt="urn:oasis:names:specification:ubl:schema:xsd:UnqualifiedDataTypes-2" xmlns:ccts-cct="urn:un:unece:uncefact:data:specification:CoreComponentTypeSchemaModule:2">
									<xsl:sequence select="@node()"/>
									<xsl:sequence select="node()"/>
								</TaxTotal>
							</xsl:for-each>
						</xsl:if>
					</xsl:for-each-group>
				</xsl:variable>
				<xsl:for-each select="$var127_resultof_map/cbc:TaxAmount">
					<cbc:CalculationRate>
						<xsl:sequence select="xs:string((xs:decimal(fn:string($var128_current)) div xs:decimal(fn:string(.))))"/>
					</cbc:CalculationRate>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$par0/cbc:MathematicOperatorCode">
				<cbc:MathematicOperatorCode>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:MathematicOperatorCode>
			</xsl:for-each>
		</cac:TaxExchangeRate>
	</xsl:template>
	<xsl:template match="/">
		<Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:n0="urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2" xmlns:qdt="urn:oasis:names:specification:ubl:schema:xsd:QualifiedDataTypes-2" xmlns:sac="urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2" xmlns:sbc="urn:oasis:names:specification:ubl:schema:xsd:SignatureBasicComponents-2" xmlns:udt="urn:oasis:names:specification:ubl:schema:xsd:UnqualifiedDataTypes-2" xmlns:ccts-cct="urn:un:unece:uncefact:data:specification:CoreComponentTypeSchemaModule:2">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'urn:oasis:names:specification:ubl:schema:xsd:Invoice-2 C:/UBL/xsd/maindoc/UBL-Invoice-2.1.xsd'"/>
			<xsl:for-each select="n1:Invoice">
				<xsl:variable name="var162_current" as="node()" select="."/>
				<xsl:variable name="var1_DocumentCurrencyCode" as="node()?" select="cbc:DocumentCurrencyCode"/>
				<xsl:variable name="var2_TaxTotal" as="node()*" select="cac:TaxTotal"/>
				<xsl:variable name="var3_resultof_first" as="node()" select="cac:AccountingSupplierParty"/>
				<xsl:variable name="var4_resultof_first" as="node()" select="cac:AccountingCustomerParty"/>
				<xsl:variable name="var5_resultof_first" as="node()" select="cac:LegalMonetaryTotal"/>
				<xsl:variable name="var6_resultof_first" as="node()" select="cbc:ID"/>
				<xsl:variable name="var10_resultof_map" as="node()*">
					<xsl:for-each-group select="$var2_TaxTotal" group-by="fn:string(cbc:TaxAmount/@currencyID)">
						<xsl:variable name="var9_resultof_group_items" as="item()+" select="current-group()"/>
						<xsl:variable name="var8_resultof_filter" as="node()*">
							<xsl:for-each select="$var1_DocumentCurrencyCode">
								<xsl:variable name="var7_current" as="node()" select="."/>
								<xsl:if test="fn:exists($var9_resultof_group_items[(fn:string($var7_current) = fn:string(cbc:TaxAmount/@currencyID))])">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists($var8_resultof_filter)">
							<xsl:for-each select="current-group()">
								<TaxTotal xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:n0="urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2" xmlns:n1="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:qdt="urn:oasis:names:specification:ubl:schema:xsd:QualifiedDataTypes-2" xmlns:sac="urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2" xmlns:sbc="urn:oasis:names:specification:ubl:schema:xsd:SignatureBasicComponents-2" xmlns:udt="urn:oasis:names:specification:ubl:schema:xsd:UnqualifiedDataTypes-2" xmlns:ccts-cct="urn:un:unece:uncefact:data:specification:CoreComponentTypeSchemaModule:2">
									<xsl:sequence select="@node()"/>
									<xsl:sequence select="node()"/>
								</TaxTotal>
							</xsl:for-each>
						</xsl:if>
					</xsl:for-each-group>
				</xsl:variable>
				<xsl:variable name="var14_resultof_map" as="node()*">
					<xsl:for-each-group select="$var2_TaxTotal" group-by="fn:string(cbc:TaxAmount/@currencyID)">
						<xsl:variable name="var13_resultof_group_items" as="item()+" select="current-group()"/>
						<xsl:variable name="var12_resultof_filter" as="node()*">
							<xsl:for-each select="$var1_DocumentCurrencyCode">
								<xsl:variable name="var11_current" as="node()" select="."/>
								<xsl:if test="fn:exists($var13_resultof_group_items[(fn:string($var11_current) = fn:string(cbc:TaxAmount/@currencyID))])">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:not(fn:exists($var12_resultof_filter))">
							<TaxExchangeRate xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:n0="urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2" xmlns:n1="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:qdt="urn:oasis:names:specification:ubl:schema:xsd:QualifiedDataTypes-2" xmlns:sac="urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2" xmlns:sbc="urn:oasis:names:specification:ubl:schema:xsd:SignatureBasicComponents-2" xmlns:udt="urn:oasis:names:specification:ubl:schema:xsd:UnqualifiedDataTypes-2" xmlns:ccts-cct="urn:un:unece:uncefact:data:specification:CoreComponentTypeSchemaModule:2">
								<xsl:for-each select="$var1_DocumentCurrencyCode">
									<cbc:SourceCurrencyCode>
										<xsl:call-template name="tbf:tbf1_SourceCurrencyCodeType">
											<xsl:with-param name="input" select="." as="node()"/>
										</xsl:call-template>
									</cbc:SourceCurrencyCode>
								</xsl:for-each>
								<xsl:for-each select="current-group()">
									<cbc:TargetCurrencyCode>
										<xsl:sequence select="fn:string(cbc:TaxAmount/@currencyID)"/>
									</cbc:TargetCurrencyCode>
								</xsl:for-each>
								<cbc:MathematicOperatorCode>Multiply</cbc:MathematicOperatorCode>
							</TaxExchangeRate>
						</xsl:if>
					</xsl:for-each-group>
				</xsl:variable>
				<xsl:for-each select="cbc:UBLVersionID">
					<cbc:UBLVersionID>
						<xsl:sequence select="fn:string(.)"/>
					</cbc:UBLVersionID>
				</xsl:for-each>
				<xsl:for-each select="cbc:CustomizationID">
					<cbc:CustomizationID>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:CustomizationID>
				</xsl:for-each>
				<xsl:for-each select="cbc:ProfileID">
					<cbc:ProfileID>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:ProfileID>
				</xsl:for-each>
				<cbc:ID>
					<xsl:sequence select="($var6_resultof_first/@node(), $var6_resultof_first/node())"/>
				</cbc:ID>
				<cbc:IssueDate>
					<xsl:sequence select="xs:string(xs:date(fn:string(cbc:IssueDate)))"/>
				</cbc:IssueDate>
				<xsl:for-each select="cbc:DueDate">
					<cbc:DueDate>
						<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
					</cbc:DueDate>
				</xsl:for-each>
				<xsl:for-each select="cbc:InvoiceTypeCode">
					<xsl:variable name="var15_listAgencyName" as="node()?" select="@listAgencyName"/>
					<xsl:variable name="var16_listAgencyID" as="node()?" select="@listAgencyID"/>
					<cbc:InvoiceTypeCode>
						<xsl:attribute name="listID" namespace="" select="'UNCL1001'"/>
						<xsl:if test="fn:exists($var16_listAgencyID)">
							<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var16_listAgencyID)"/>
						</xsl:if>
						<xsl:if test="fn:exists($var15_listAgencyName)">
							<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var15_listAgencyName)"/>
						</xsl:if>
						<xsl:sequence select="fn:string(.)"/>
					</cbc:InvoiceTypeCode>
				</xsl:for-each>
				<xsl:for-each select="cbc:Note">
					<cbc:Note>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:Note>
				</xsl:for-each>
				<xsl:for-each select="cbc:TaxPointDate">
					<cbc:TaxPointDate>
						<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
					</cbc:TaxPointDate>
				</xsl:for-each>
				<xsl:for-each select="$var1_DocumentCurrencyCode">
					<xsl:variable name="var17_listSchemeURI" as="node()?" select="@listSchemeURI"/>
					<xsl:variable name="var18_listURI" as="node()?" select="@listURI"/>
					<xsl:variable name="var19_languageID" as="node()?" select="@languageID"/>
					<xsl:variable name="var20_name" as="node()?" select="@name"/>
					<xsl:variable name="var21_listVersionID" as="node()?" select="@listVersionID"/>
					<xsl:variable name="var22_listName" as="node()?" select="@listName"/>
					<xsl:variable name="var23_listAgencyID" as="node()?" select="@listAgencyID"/>
					<xsl:variable name="var24_listAgencyName" as="node()?" select="@listAgencyName"/>
					<cbc:DocumentCurrencyCode>
						<xsl:attribute name="listID" namespace="" select="'ISO4217'"/>
						<xsl:if test="fn:exists($var23_listAgencyID)">
							<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var23_listAgencyID)"/>
						</xsl:if>
						<xsl:if test="fn:exists($var24_listAgencyName)">
							<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var24_listAgencyName)"/>
						</xsl:if>
						<xsl:if test="fn:exists($var22_listName)">
							<xsl:attribute name="listName" namespace="" select="fn:string($var22_listName)"/>
						</xsl:if>
						<xsl:if test="fn:exists($var21_listVersionID)">
							<xsl:attribute name="listVersionID" namespace="" select="fn:string($var21_listVersionID)"/>
						</xsl:if>
						<xsl:if test="fn:exists($var20_name)">
							<xsl:attribute name="name" namespace="" select="fn:string($var20_name)"/>
						</xsl:if>
						<xsl:if test="fn:exists($var19_languageID)">
							<xsl:attribute name="languageID" namespace="" select="fn:string($var19_languageID)"/>
						</xsl:if>
						<xsl:if test="fn:exists($var18_listURI)">
							<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string($var18_listURI)))"/>
						</xsl:if>
						<xsl:if test="fn:exists($var17_listSchemeURI)">
							<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var17_listSchemeURI)))"/>
						</xsl:if>
						<xsl:sequence select="fn:string(.)"/>
					</cbc:DocumentCurrencyCode>
				</xsl:for-each>
				<xsl:variable name="var25_resultof_map" as="node()*" select="$var14_resultof_map"/>
				<xsl:for-each select="$var25_resultof_map/cbc:TargetCurrencyCode">
					<cbc:TaxCurrencyCode>
						<xsl:attribute name="listID" namespace="" select="'ISO4217'"/>
						<xsl:if test="fn:exists(@listAgencyID)">
							<xsl:attribute name="listAgencyID" namespace="" select="fn:string(@listAgencyID)"/>
						</xsl:if>
						<xsl:if test="fn:exists(@listAgencyName)">
							<xsl:attribute name="listAgencyName" namespace="" select="fn:string(@listAgencyName)"/>
						</xsl:if>
						<xsl:if test="fn:exists(@listName)">
							<xsl:attribute name="listName" namespace="" select="fn:string(@listName)"/>
						</xsl:if>
						<xsl:if test="fn:exists(@listVersionID)">
							<xsl:attribute name="listVersionID" namespace="" select="fn:string(@listVersionID)"/>
						</xsl:if>
						<xsl:if test="fn:exists(@name)">
							<xsl:attribute name="name" namespace="" select="fn:string(@name)"/>
						</xsl:if>
						<xsl:if test="fn:exists(@languageID)">
							<xsl:attribute name="languageID" namespace="" select="fn:string(@languageID)"/>
						</xsl:if>
						<xsl:if test="fn:exists(@listURI)">
							<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(@listURI)))"/>
						</xsl:if>
						<xsl:if test="fn:exists(@listSchemeURI)">
							<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(@listSchemeURI)))"/>
						</xsl:if>
						<xsl:sequence select="fn:string(.)"/>
					</cbc:TaxCurrencyCode>
				</xsl:for-each>
				<xsl:for-each select="cbc:AccountingCost">
					<cbc:AccountingCost>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:AccountingCost>
				</xsl:for-each>
				<xsl:for-each select="cac:InvoicePeriod">
					<cac:InvoicePeriod>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:InvoicePeriod>
				</xsl:for-each>
				<xsl:for-each select="cac:OrderReference">
					<cac:OrderReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:OrderReference>
				</xsl:for-each>
				<xsl:for-each select="cac:ContractDocumentReference">
					<xsl:variable name="var26_resultof_first" as="node()" select="cbc:ID"/>
					<cac:ContractDocumentReference>
						<cbc:ID>
							<xsl:sequence select="($var26_resultof_first/@node(), $var26_resultof_first/node())"/>
						</cbc:ID>
						<xsl:for-each select="cbc:CopyIndicator">
							<cbc:CopyIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
							</cbc:CopyIndicator>
						</xsl:for-each>
						<xsl:for-each select="cbc:UUID">
							<cbc:UUID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:UUID>
						</xsl:for-each>
						<xsl:for-each select="cbc:IssueDate">
							<cbc:IssueDate>
								<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
							</cbc:IssueDate>
						</xsl:for-each>
						<xsl:for-each select="cbc:IssueTime">
							<cbc:IssueTime>
								<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
							</cbc:IssueTime>
						</xsl:for-each>
						<xsl:for-each select="cbc:DocumentTypeCode">
							<xsl:variable name="var27_listSchemeURI" as="node()?" select="@listSchemeURI"/>
							<xsl:variable name="var28_listURI" as="node()?" select="@listURI"/>
							<xsl:variable name="var29_languageID" as="node()?" select="@languageID"/>
							<xsl:variable name="var30_name" as="node()?" select="@name"/>
							<xsl:variable name="var31_listVersionID" as="node()?" select="@listVersionID"/>
							<xsl:variable name="var32_listName" as="node()?" select="@listName"/>
							<xsl:variable name="var33_listAgencyID" as="node()?" select="@listAgencyID"/>
							<xsl:variable name="var34_listAgencyName" as="node()?" select="@listAgencyName"/>
							<cbc:DocumentTypeCode>
								<xsl:attribute name="listID" namespace="" select="'UNCL1001'"/>
								<xsl:if test="fn:exists($var33_listAgencyID)">
									<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var33_listAgencyID)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var34_listAgencyName)">
									<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var34_listAgencyName)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var32_listName)">
									<xsl:attribute name="listName" namespace="" select="fn:string($var32_listName)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var31_listVersionID)">
									<xsl:attribute name="listVersionID" namespace="" select="fn:string($var31_listVersionID)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var30_name)">
									<xsl:attribute name="name" namespace="" select="fn:string($var30_name)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var29_languageID)">
									<xsl:attribute name="languageID" namespace="" select="fn:string($var29_languageID)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var28_listURI)">
									<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string($var28_listURI)))"/>
								</xsl:if>
								<xsl:if test="fn:exists($var27_listSchemeURI)">
									<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var27_listSchemeURI)))"/>
								</xsl:if>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:DocumentTypeCode>
						</xsl:for-each>
						<xsl:for-each select="cbc:DocumentType">
							<cbc:DocumentType>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:DocumentType>
						</xsl:for-each>
						<xsl:for-each select="cbc:XPath">
							<cbc:XPath>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:XPath>
						</xsl:for-each>
						<xsl:for-each select="cbc:LanguageID">
							<cbc:LanguageID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:LanguageID>
						</xsl:for-each>
						<xsl:for-each select="cbc:LocaleCode">
							<cbc:LocaleCode>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:LocaleCode>
						</xsl:for-each>
						<xsl:for-each select="cbc:VersionID">
							<cbc:VersionID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:VersionID>
						</xsl:for-each>
						<xsl:for-each select="cbc:DocumentStatusCode">
							<cbc:DocumentStatusCode>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:DocumentStatusCode>
						</xsl:for-each>
						<xsl:for-each select="cbc:DocumentDescription">
							<cbc:DocumentDescription>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:DocumentDescription>
						</xsl:for-each>
						<xsl:for-each select="cac:Attachment">
							<cac:Attachment>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:Attachment>
						</xsl:for-each>
						<xsl:for-each select="cac:ValidityPeriod">
							<cac:ValidityPeriod>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:ValidityPeriod>
						</xsl:for-each>
						<xsl:for-each select="cac:IssuerParty">
							<cac:IssuerParty>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:IssuerParty>
						</xsl:for-each>
						<xsl:for-each select="cac:ResultOfVerification">
							<cac:ResultOfVerification>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:ResultOfVerification>
						</xsl:for-each>
					</cac:ContractDocumentReference>
				</xsl:for-each>
				<xsl:for-each select="cac:AdditionalDocumentReference">
					<cac:AdditionalDocumentReference>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:AdditionalDocumentReference>
				</xsl:for-each>
				<cac:AccountingSupplierParty>
					<xsl:for-each select="$var3_resultof_first/cbc:CustomerAssignedAccountID">
						<cbc:CustomerAssignedAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:CustomerAssignedAccountID>
					</xsl:for-each>
					<xsl:for-each select="$var3_resultof_first/cbc:AdditionalAccountID">
						<cbc:AdditionalAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:AdditionalAccountID>
					</xsl:for-each>
					<xsl:for-each select="$var3_resultof_first/cbc:DataSendingCapability">
						<cbc:DataSendingCapability>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:DataSendingCapability>
					</xsl:for-each>
					<xsl:for-each select="$var3_resultof_first/cac:Party">
						<cac:Party>
							<xsl:for-each select="cbc:MarkCareIndicator">
								<cbc:MarkCareIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkCareIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:MarkAttentionIndicator">
								<cbc:MarkAttentionIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkAttentionIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:WebsiteURI">
								<cbc:WebsiteURI>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:WebsiteURI>
							</xsl:for-each>
							<xsl:for-each select="cbc:LogoReferenceID">
								<cbc:LogoReferenceID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:LogoReferenceID>
							</xsl:for-each>
							<xsl:for-each select="cbc:EndpointID">
								<cbc:EndpointID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:EndpointID>
							</xsl:for-each>
							<xsl:for-each select="cbc:IndustryClassificationCode">
								<cbc:IndustryClassificationCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:IndustryClassificationCode>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyIdentification">
								<xsl:variable name="var35_resultof_first" as="node()" select="cbc:ID"/>
								<xsl:variable name="var36_schemeURI" as="node()?" select="$var35_resultof_first/@schemeURI"/>
								<xsl:variable name="var37_schemeDataURI" as="node()?" select="$var35_resultof_first/@schemeDataURI"/>
								<xsl:variable name="var38_schemeVersionID" as="node()?" select="$var35_resultof_first/@schemeVersionID"/>
								<xsl:variable name="var39_schemeAgencyName" as="node()?" select="$var35_resultof_first/@schemeAgencyName"/>
								<xsl:variable name="var40_schemeAgencyID" as="node()?" select="$var35_resultof_first/@schemeAgencyID"/>
								<xsl:variable name="var41_schemeID" as="node()?" select="$var35_resultof_first/@schemeID"/>
								<xsl:variable name="var42_schemeName" as="node()?" select="$var35_resultof_first/@schemeName"/>
								<cac:PartyIdentification>
									<cbc:ID>
										<xsl:attribute name="schemeID" namespace="">
											<xsl:choose>
												<xsl:when test="fn:exists($var41_schemeID)">
													<xsl:sequence select="fn:string($var41_schemeID)"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="'ZZZ'"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:attribute>
										<xsl:if test="fn:exists($var42_schemeName)">
											<xsl:attribute name="schemeName" namespace="" select="fn:string($var42_schemeName)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var40_schemeAgencyID)">
											<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string($var40_schemeAgencyID)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var39_schemeAgencyName)">
											<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string($var39_schemeAgencyName)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var38_schemeVersionID)">
											<xsl:attribute name="schemeVersionID" namespace="" select="fn:string($var38_schemeVersionID)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var37_schemeDataURI)">
											<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string($var37_schemeDataURI)))"/>
										</xsl:if>
										<xsl:if test="fn:exists($var36_schemeURI)">
											<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var36_schemeURI)))"/>
										</xsl:if>
										<xsl:sequence select="fn:string($var35_resultof_first)"/>
									</cbc:ID>
								</cac:PartyIdentification>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyName">
								<cac:PartyName>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PartyName>
							</xsl:for-each>
							<xsl:for-each select="cac:Language">
								<cac:Language>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Language>
							</xsl:for-each>
							<xsl:for-each select="cac:PostalAddress">
								<cac:PostalAddress>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressTypeCode">
										<cbc:AddressTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressFormatCode">
										<cbc:AddressFormatCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Postbox">
										<cbc:Postbox>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Postbox>
									</xsl:for-each>
									<xsl:for-each select="cbc:Floor">
										<cbc:Floor>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Floor>
									</xsl:for-each>
									<xsl:for-each select="cbc:Room">
										<cbc:Room>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Room>
									</xsl:for-each>
									<xsl:for-each select="cbc:StreetName">
										<cbc:StreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:StreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:AdditionalStreetName">
										<cbc:AdditionalStreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AdditionalStreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BlockName">
										<cbc:BlockName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BlockName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingName">
										<cbc:BuildingName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingNumber">
										<cbc:BuildingNumber>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingNumber>
									</xsl:for-each>
									<xsl:for-each select="cbc:InhouseMail">
										<cbc:InhouseMail>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InhouseMail>
									</xsl:for-each>
									<xsl:for-each select="cbc:Department">
										<cbc:Department>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Department>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkAttention">
										<cbc:MarkAttention>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkAttention>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkCare">
										<cbc:MarkCare>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkCare>
									</xsl:for-each>
									<xsl:for-each select="cbc:PlotIdentification">
										<cbc:PlotIdentification>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PlotIdentification>
									</xsl:for-each>
									<xsl:for-each select="cbc:CitySubdivisionName">
										<cbc:CitySubdivisionName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CitySubdivisionName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CityName">
										<cbc:CityName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CityName>
									</xsl:for-each>
									<xsl:for-each select="cbc:PostalZone">
										<cbc:PostalZone>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PostalZone>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Region">
										<cbc:Region>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Region>
									</xsl:for-each>
									<xsl:for-each select="cbc:District">
										<cbc:District>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:District>
									</xsl:for-each>
									<xsl:for-each select="cbc:TimezoneOffset">
										<cbc:TimezoneOffset>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TimezoneOffset>
									</xsl:for-each>
									<xsl:for-each select="cac:AddressLine">
										<cac:AddressLine>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:AddressLine>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<cac:Country>
											<xsl:for-each select="cbc:IdentificationCode">
												<xsl:variable name="var43_listSchemeURI" as="node()?" select="@listSchemeURI"/>
												<xsl:variable name="var44_listURI" as="node()?" select="@listURI"/>
												<xsl:variable name="var45_languageID" as="node()?" select="@languageID"/>
												<xsl:variable name="var46_name" as="node()?" select="@name"/>
												<xsl:variable name="var47_listVersionID" as="node()?" select="@listVersionID"/>
												<xsl:variable name="var48_listName" as="node()?" select="@listName"/>
												<xsl:variable name="var49_listAgencyID" as="node()?" select="@listAgencyID"/>
												<xsl:variable name="var50_listAgencyName" as="node()?" select="@listAgencyName"/>
												<cbc:IdentificationCode>
													<xsl:attribute name="listID" namespace="" select="'ISO3166-1:Alpha2'"/>
													<xsl:if test="fn:exists($var49_listAgencyID)">
														<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var49_listAgencyID)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var50_listAgencyName)">
														<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var50_listAgencyName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var48_listName)">
														<xsl:attribute name="listName" namespace="" select="fn:string($var48_listName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var47_listVersionID)">
														<xsl:attribute name="listVersionID" namespace="" select="fn:string($var47_listVersionID)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var46_name)">
														<xsl:attribute name="name" namespace="" select="fn:string($var46_name)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var45_languageID)">
														<xsl:attribute name="languageID" namespace="" select="fn:string($var45_languageID)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var44_listURI)">
														<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string($var44_listURI)))"/>
													</xsl:if>
													<xsl:if test="fn:exists($var43_listSchemeURI)">
														<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var43_listSchemeURI)))"/>
													</xsl:if>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:IdentificationCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Name">
												<cbc:Name>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Name>
											</xsl:for-each>
										</cac:Country>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:PostalAddress>
							</xsl:for-each>
							<xsl:for-each select="cac:PhysicalLocation">
								<cac:PhysicalLocation>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PhysicalLocation>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyTaxScheme">
								<cac:PartyTaxScheme>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PartyTaxScheme>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyLegalEntity">
								<cac:PartyLegalEntity>
									<xsl:for-each select="cbc:RegistrationName">
										<cbc:RegistrationName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:RegistrationName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyID">
										<cbc:CompanyID>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyID>
									</xsl:for-each>
									<xsl:for-each select="cbc:RegistrationDate">
										<cbc:RegistrationDate>
											<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
										</cbc:RegistrationDate>
									</xsl:for-each>
									<xsl:for-each select="cbc:RegistrationExpirationDate">
										<cbc:RegistrationExpirationDate>
											<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
										</cbc:RegistrationExpirationDate>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLegalFormCode">
										<cbc:CompanyLegalFormCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLegalFormCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLegalForm">
										<cbc:CompanyLegalForm>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLegalForm>
									</xsl:for-each>
									<xsl:for-each select="cbc:SoleProprietorshipIndicator">
										<cbc:SoleProprietorshipIndicator>
											<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
										</cbc:SoleProprietorshipIndicator>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLiquidationStatusCode">
										<cbc:CompanyLiquidationStatusCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLiquidationStatusCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:CorporateStockAmount">
										<cbc:CorporateStockAmount>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CorporateStockAmount>
									</xsl:for-each>
									<xsl:for-each select="cbc:FullyPaidSharesIndicator">
										<cbc:FullyPaidSharesIndicator>
											<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
										</cbc:FullyPaidSharesIndicator>
									</xsl:for-each>
									<xsl:for-each select="cac:RegistrationAddress">
										<cac:RegistrationAddress>
											<xsl:for-each select="cbc:ID">
												<cbc:ID>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:ID>
											</xsl:for-each>
											<xsl:for-each select="cbc:AddressTypeCode">
												<cbc:AddressTypeCode>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:AddressTypeCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:AddressFormatCode">
												<cbc:AddressFormatCode>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:AddressFormatCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Postbox">
												<cbc:Postbox>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Postbox>
											</xsl:for-each>
											<xsl:for-each select="cbc:Floor">
												<cbc:Floor>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Floor>
											</xsl:for-each>
											<xsl:for-each select="cbc:Room">
												<cbc:Room>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Room>
											</xsl:for-each>
											<xsl:for-each select="cbc:StreetName">
												<cbc:StreetName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:StreetName>
											</xsl:for-each>
											<xsl:for-each select="cbc:AdditionalStreetName">
												<cbc:AdditionalStreetName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:AdditionalStreetName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BlockName">
												<cbc:BlockName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:BlockName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BuildingName">
												<cbc:BuildingName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:BuildingName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BuildingNumber">
												<cbc:BuildingNumber>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:BuildingNumber>
											</xsl:for-each>
											<xsl:for-each select="cbc:InhouseMail">
												<cbc:InhouseMail>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:InhouseMail>
											</xsl:for-each>
											<xsl:for-each select="cbc:Department">
												<cbc:Department>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Department>
											</xsl:for-each>
											<xsl:for-each select="cbc:MarkAttention">
												<cbc:MarkAttention>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:MarkAttention>
											</xsl:for-each>
											<xsl:for-each select="cbc:MarkCare">
												<cbc:MarkCare>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:MarkCare>
											</xsl:for-each>
											<xsl:for-each select="cbc:PlotIdentification">
												<cbc:PlotIdentification>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:PlotIdentification>
											</xsl:for-each>
											<xsl:for-each select="cbc:CitySubdivisionName">
												<cbc:CitySubdivisionName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:CitySubdivisionName>
											</xsl:for-each>
											<xsl:for-each select="cbc:CityName">
												<cbc:CityName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:CityName>
											</xsl:for-each>
											<xsl:for-each select="cbc:PostalZone">
												<cbc:PostalZone>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:PostalZone>
											</xsl:for-each>
											<xsl:for-each select="cbc:CountrySubentity">
												<cbc:CountrySubentity>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:CountrySubentity>
											</xsl:for-each>
											<xsl:for-each select="cbc:CountrySubentityCode">
												<cbc:CountrySubentityCode>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:CountrySubentityCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Region">
												<cbc:Region>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Region>
											</xsl:for-each>
											<xsl:for-each select="cbc:District">
												<cbc:District>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:District>
											</xsl:for-each>
											<xsl:for-each select="cbc:TimezoneOffset">
												<cbc:TimezoneOffset>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:TimezoneOffset>
											</xsl:for-each>
											<xsl:for-each select="cac:AddressLine">
												<cac:AddressLine>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cac:AddressLine>
											</xsl:for-each>
											<xsl:for-each select="cac:Country">
												<cac:Country>
													<xsl:for-each select="cbc:IdentificationCode">
														<xsl:variable name="var51_listSchemeURI" as="node()?" select="@listSchemeURI"/>
														<xsl:variable name="var52_listURI" as="node()?" select="@listURI"/>
														<xsl:variable name="var53_languageID" as="node()?" select="@languageID"/>
														<xsl:variable name="var54_name" as="node()?" select="@name"/>
														<xsl:variable name="var55_listVersionID" as="node()?" select="@listVersionID"/>
														<xsl:variable name="var56_listName" as="node()?" select="@listName"/>
														<xsl:variable name="var57_listAgencyID" as="node()?" select="@listAgencyID"/>
														<xsl:variable name="var58_listAgencyName" as="node()?" select="@listAgencyName"/>
														<cbc:IdentificationCode>
															<xsl:attribute name="listID" namespace="" select="'ISO3166-1:Alpha2'"/>
															<xsl:if test="fn:exists($var57_listAgencyID)">
																<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var57_listAgencyID)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var58_listAgencyName)">
																<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var58_listAgencyName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var56_listName)">
																<xsl:attribute name="listName" namespace="" select="fn:string($var56_listName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var55_listVersionID)">
																<xsl:attribute name="listVersionID" namespace="" select="fn:string($var55_listVersionID)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var54_name)">
																<xsl:attribute name="name" namespace="" select="fn:string($var54_name)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var53_languageID)">
																<xsl:attribute name="languageID" namespace="" select="fn:string($var53_languageID)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var52_listURI)">
																<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string($var52_listURI)))"/>
															</xsl:if>
															<xsl:if test="fn:exists($var51_listSchemeURI)">
																<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var51_listSchemeURI)))"/>
															</xsl:if>
															<xsl:sequence select="fn:string(.)"/>
														</cbc:IdentificationCode>
													</xsl:for-each>
													<xsl:for-each select="cbc:Name">
														<cbc:Name>
															<xsl:sequence select="(./@node(), ./node())"/>
														</cbc:Name>
													</xsl:for-each>
												</cac:Country>
											</xsl:for-each>
											<xsl:for-each select="cac:LocationCoordinate">
												<cac:LocationCoordinate>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cac:LocationCoordinate>
											</xsl:for-each>
										</cac:RegistrationAddress>
									</xsl:for-each>
									<xsl:for-each select="cac:CorporateRegistrationScheme">
										<cac:CorporateRegistrationScheme>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:CorporateRegistrationScheme>
									</xsl:for-each>
									<xsl:for-each select="cac:HeadOfficeParty">
										<cac:HeadOfficeParty>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:HeadOfficeParty>
									</xsl:for-each>
									<xsl:for-each select="cac:ShareholderParty">
										<cac:ShareholderParty>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:ShareholderParty>
									</xsl:for-each>
								</cac:PartyLegalEntity>
							</xsl:for-each>
							<xsl:for-each select="cac:Contact">
								<cac:Contact>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Contact>
							</xsl:for-each>
							<xsl:for-each select="cac:Person">
								<cac:Person>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Person>
							</xsl:for-each>
							<xsl:for-each select="cac:AgentParty">
								<cac:AgentParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:AgentParty>
							</xsl:for-each>
							<xsl:for-each select="cac:ServiceProviderParty">
								<cac:ServiceProviderParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ServiceProviderParty>
							</xsl:for-each>
							<xsl:for-each select="cac:PowerOfAttorney">
								<cac:PowerOfAttorney>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PowerOfAttorney>
							</xsl:for-each>
							<xsl:for-each select="cac:FinancialAccount">
								<cac:FinancialAccount>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:FinancialAccount>
							</xsl:for-each>
						</cac:Party>
					</xsl:for-each>
					<xsl:for-each select="$var3_resultof_first/cac:DespatchContact">
						<cac:DespatchContact>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:DespatchContact>
					</xsl:for-each>
					<xsl:for-each select="$var3_resultof_first/cac:AccountingContact">
						<cac:AccountingContact>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:AccountingContact>
					</xsl:for-each>
					<xsl:for-each select="$var3_resultof_first/cac:SellerContact">
						<cac:SellerContact>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:SellerContact>
					</xsl:for-each>
				</cac:AccountingSupplierParty>
				<cac:AccountingCustomerParty>
					<xsl:for-each select="$var4_resultof_first/cbc:CustomerAssignedAccountID">
						<cbc:CustomerAssignedAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:CustomerAssignedAccountID>
					</xsl:for-each>
					<xsl:for-each select="$var4_resultof_first/cbc:SupplierAssignedAccountID">
						<cbc:SupplierAssignedAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:SupplierAssignedAccountID>
					</xsl:for-each>
					<xsl:for-each select="$var4_resultof_first/cbc:AdditionalAccountID">
						<cbc:AdditionalAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:AdditionalAccountID>
					</xsl:for-each>
					<xsl:for-each select="$var4_resultof_first/cac:Party">
						<cac:Party>
							<xsl:for-each select="cbc:MarkCareIndicator">
								<cbc:MarkCareIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkCareIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:MarkAttentionIndicator">
								<cbc:MarkAttentionIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkAttentionIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:WebsiteURI">
								<cbc:WebsiteURI>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:WebsiteURI>
							</xsl:for-each>
							<xsl:for-each select="cbc:LogoReferenceID">
								<cbc:LogoReferenceID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:LogoReferenceID>
							</xsl:for-each>
							<xsl:for-each select="cbc:EndpointID">
								<cbc:EndpointID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:EndpointID>
							</xsl:for-each>
							<xsl:for-each select="cbc:IndustryClassificationCode">
								<cbc:IndustryClassificationCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:IndustryClassificationCode>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyIdentification">
								<xsl:variable name="var59_resultof_first" as="node()" select="cbc:ID"/>
								<xsl:variable name="var60_schemeURI" as="node()?" select="$var59_resultof_first/@schemeURI"/>
								<xsl:variable name="var61_schemeDataURI" as="node()?" select="$var59_resultof_first/@schemeDataURI"/>
								<xsl:variable name="var62_schemeVersionID" as="node()?" select="$var59_resultof_first/@schemeVersionID"/>
								<xsl:variable name="var63_schemeAgencyName" as="node()?" select="$var59_resultof_first/@schemeAgencyName"/>
								<xsl:variable name="var64_schemeAgencyID" as="node()?" select="$var59_resultof_first/@schemeAgencyID"/>
								<xsl:variable name="var65_schemeID" as="node()?" select="$var59_resultof_first/@schemeID"/>
								<xsl:variable name="var66_schemeName" as="node()?" select="$var59_resultof_first/@schemeName"/>
								<cac:PartyIdentification>
									<cbc:ID>
										<xsl:attribute name="schemeID" namespace="">
											<xsl:choose>
												<xsl:when test="fn:exists($var65_schemeID)">
													<xsl:sequence select="fn:string($var65_schemeID)"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="'ZZZ'"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:attribute>
										<xsl:if test="fn:exists($var66_schemeName)">
											<xsl:attribute name="schemeName" namespace="" select="fn:string($var66_schemeName)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var64_schemeAgencyID)">
											<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string($var64_schemeAgencyID)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var63_schemeAgencyName)">
											<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string($var63_schemeAgencyName)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var62_schemeVersionID)">
											<xsl:attribute name="schemeVersionID" namespace="" select="fn:string($var62_schemeVersionID)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var61_schemeDataURI)">
											<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string($var61_schemeDataURI)))"/>
										</xsl:if>
										<xsl:if test="fn:exists($var60_schemeURI)">
											<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var60_schemeURI)))"/>
										</xsl:if>
										<xsl:sequence select="fn:string($var59_resultof_first)"/>
									</cbc:ID>
								</cac:PartyIdentification>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyName">
								<cac:PartyName>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PartyName>
							</xsl:for-each>
							<xsl:for-each select="cac:Language">
								<cac:Language>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Language>
							</xsl:for-each>
							<xsl:for-each select="cac:PostalAddress">
								<cac:PostalAddress>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressTypeCode">
										<cbc:AddressTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressFormatCode">
										<cbc:AddressFormatCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Postbox">
										<cbc:Postbox>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Postbox>
									</xsl:for-each>
									<xsl:for-each select="cbc:Floor">
										<cbc:Floor>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Floor>
									</xsl:for-each>
									<xsl:for-each select="cbc:Room">
										<cbc:Room>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Room>
									</xsl:for-each>
									<xsl:for-each select="cbc:StreetName">
										<cbc:StreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:StreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:AdditionalStreetName">
										<cbc:AdditionalStreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AdditionalStreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BlockName">
										<cbc:BlockName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BlockName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingName">
										<cbc:BuildingName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingNumber">
										<cbc:BuildingNumber>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingNumber>
									</xsl:for-each>
									<xsl:for-each select="cbc:InhouseMail">
										<cbc:InhouseMail>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InhouseMail>
									</xsl:for-each>
									<xsl:for-each select="cbc:Department">
										<cbc:Department>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Department>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkAttention">
										<cbc:MarkAttention>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkAttention>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkCare">
										<cbc:MarkCare>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkCare>
									</xsl:for-each>
									<xsl:for-each select="cbc:PlotIdentification">
										<cbc:PlotIdentification>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PlotIdentification>
									</xsl:for-each>
									<xsl:for-each select="cbc:CitySubdivisionName">
										<cbc:CitySubdivisionName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CitySubdivisionName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CityName">
										<cbc:CityName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CityName>
									</xsl:for-each>
									<xsl:for-each select="cbc:PostalZone">
										<cbc:PostalZone>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PostalZone>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Region">
										<cbc:Region>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Region>
									</xsl:for-each>
									<xsl:for-each select="cbc:District">
										<cbc:District>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:District>
									</xsl:for-each>
									<xsl:for-each select="cbc:TimezoneOffset">
										<cbc:TimezoneOffset>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TimezoneOffset>
									</xsl:for-each>
									<xsl:for-each select="cac:AddressLine">
										<cac:AddressLine>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:AddressLine>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<cac:Country>
											<xsl:for-each select="cbc:IdentificationCode">
												<xsl:variable name="var67_listSchemeURI" as="node()?" select="@listSchemeURI"/>
												<xsl:variable name="var68_listURI" as="node()?" select="@listURI"/>
												<xsl:variable name="var69_languageID" as="node()?" select="@languageID"/>
												<xsl:variable name="var70_name" as="node()?" select="@name"/>
												<xsl:variable name="var71_listVersionID" as="node()?" select="@listVersionID"/>
												<xsl:variable name="var72_listName" as="node()?" select="@listName"/>
												<xsl:variable name="var73_listAgencyID" as="node()?" select="@listAgencyID"/>
												<xsl:variable name="var74_listAgencyName" as="node()?" select="@listAgencyName"/>
												<cbc:IdentificationCode>
													<xsl:attribute name="listID" namespace="" select="'ISO3166-1:Alpha2'"/>
													<xsl:if test="fn:exists($var73_listAgencyID)">
														<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var73_listAgencyID)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var74_listAgencyName)">
														<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var74_listAgencyName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var72_listName)">
														<xsl:attribute name="listName" namespace="" select="fn:string($var72_listName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var71_listVersionID)">
														<xsl:attribute name="listVersionID" namespace="" select="fn:string($var71_listVersionID)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var70_name)">
														<xsl:attribute name="name" namespace="" select="fn:string($var70_name)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var69_languageID)">
														<xsl:attribute name="languageID" namespace="" select="fn:string($var69_languageID)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var68_listURI)">
														<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string($var68_listURI)))"/>
													</xsl:if>
													<xsl:if test="fn:exists($var67_listSchemeURI)">
														<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var67_listSchemeURI)))"/>
													</xsl:if>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:IdentificationCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Name">
												<cbc:Name>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Name>
											</xsl:for-each>
										</cac:Country>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:PostalAddress>
							</xsl:for-each>
							<xsl:for-each select="cac:PhysicalLocation">
								<cac:PhysicalLocation>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PhysicalLocation>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyTaxScheme">
								<cac:PartyTaxScheme>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PartyTaxScheme>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyLegalEntity">
								<cac:PartyLegalEntity>
									<xsl:for-each select="cbc:RegistrationName">
										<cbc:RegistrationName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:RegistrationName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyID">
										<cbc:CompanyID>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyID>
									</xsl:for-each>
									<xsl:for-each select="cbc:RegistrationDate">
										<cbc:RegistrationDate>
											<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
										</cbc:RegistrationDate>
									</xsl:for-each>
									<xsl:for-each select="cbc:RegistrationExpirationDate">
										<cbc:RegistrationExpirationDate>
											<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
										</cbc:RegistrationExpirationDate>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLegalFormCode">
										<cbc:CompanyLegalFormCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLegalFormCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLegalForm">
										<cbc:CompanyLegalForm>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLegalForm>
									</xsl:for-each>
									<xsl:for-each select="cbc:SoleProprietorshipIndicator">
										<cbc:SoleProprietorshipIndicator>
											<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
										</cbc:SoleProprietorshipIndicator>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLiquidationStatusCode">
										<cbc:CompanyLiquidationStatusCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLiquidationStatusCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:CorporateStockAmount">
										<cbc:CorporateStockAmount>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CorporateStockAmount>
									</xsl:for-each>
									<xsl:for-each select="cbc:FullyPaidSharesIndicator">
										<cbc:FullyPaidSharesIndicator>
											<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
										</cbc:FullyPaidSharesIndicator>
									</xsl:for-each>
									<xsl:for-each select="cac:RegistrationAddress">
										<cac:RegistrationAddress>
											<xsl:for-each select="cbc:ID">
												<cbc:ID>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:ID>
											</xsl:for-each>
											<xsl:for-each select="cbc:AddressTypeCode">
												<cbc:AddressTypeCode>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:AddressTypeCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:AddressFormatCode">
												<cbc:AddressFormatCode>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:AddressFormatCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Postbox">
												<cbc:Postbox>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Postbox>
											</xsl:for-each>
											<xsl:for-each select="cbc:Floor">
												<cbc:Floor>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Floor>
											</xsl:for-each>
											<xsl:for-each select="cbc:Room">
												<cbc:Room>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Room>
											</xsl:for-each>
											<xsl:for-each select="cbc:StreetName">
												<cbc:StreetName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:StreetName>
											</xsl:for-each>
											<xsl:for-each select="cbc:AdditionalStreetName">
												<cbc:AdditionalStreetName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:AdditionalStreetName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BlockName">
												<cbc:BlockName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:BlockName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BuildingName">
												<cbc:BuildingName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:BuildingName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BuildingNumber">
												<cbc:BuildingNumber>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:BuildingNumber>
											</xsl:for-each>
											<xsl:for-each select="cbc:InhouseMail">
												<cbc:InhouseMail>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:InhouseMail>
											</xsl:for-each>
											<xsl:for-each select="cbc:Department">
												<cbc:Department>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Department>
											</xsl:for-each>
											<xsl:for-each select="cbc:MarkAttention">
												<cbc:MarkAttention>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:MarkAttention>
											</xsl:for-each>
											<xsl:for-each select="cbc:MarkCare">
												<cbc:MarkCare>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:MarkCare>
											</xsl:for-each>
											<xsl:for-each select="cbc:PlotIdentification">
												<cbc:PlotIdentification>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:PlotIdentification>
											</xsl:for-each>
											<xsl:for-each select="cbc:CitySubdivisionName">
												<cbc:CitySubdivisionName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:CitySubdivisionName>
											</xsl:for-each>
											<xsl:for-each select="cbc:CityName">
												<cbc:CityName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:CityName>
											</xsl:for-each>
											<xsl:for-each select="cbc:PostalZone">
												<cbc:PostalZone>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:PostalZone>
											</xsl:for-each>
											<xsl:for-each select="cbc:CountrySubentity">
												<cbc:CountrySubentity>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:CountrySubentity>
											</xsl:for-each>
											<xsl:for-each select="cbc:CountrySubentityCode">
												<cbc:CountrySubentityCode>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:CountrySubentityCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Region">
												<cbc:Region>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Region>
											</xsl:for-each>
											<xsl:for-each select="cbc:District">
												<cbc:District>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:District>
											</xsl:for-each>
											<xsl:for-each select="cbc:TimezoneOffset">
												<cbc:TimezoneOffset>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:TimezoneOffset>
											</xsl:for-each>
											<xsl:for-each select="cac:AddressLine">
												<cac:AddressLine>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cac:AddressLine>
											</xsl:for-each>
											<xsl:for-each select="cac:Country">
												<cac:Country>
													<xsl:for-each select="cbc:IdentificationCode">
														<xsl:variable name="var75_listSchemeURI" as="node()?" select="@listSchemeURI"/>
														<xsl:variable name="var76_listURI" as="node()?" select="@listURI"/>
														<xsl:variable name="var77_languageID" as="node()?" select="@languageID"/>
														<xsl:variable name="var78_name" as="node()?" select="@name"/>
														<xsl:variable name="var79_listVersionID" as="node()?" select="@listVersionID"/>
														<xsl:variable name="var80_listName" as="node()?" select="@listName"/>
														<xsl:variable name="var81_listAgencyID" as="node()?" select="@listAgencyID"/>
														<xsl:variable name="var82_listAgencyName" as="node()?" select="@listAgencyName"/>
														<cbc:IdentificationCode>
															<xsl:attribute name="listID" namespace="" select="'ISO3166-1:Alpha2'"/>
															<xsl:if test="fn:exists($var81_listAgencyID)">
																<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var81_listAgencyID)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var82_listAgencyName)">
																<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var82_listAgencyName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var80_listName)">
																<xsl:attribute name="listName" namespace="" select="fn:string($var80_listName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var79_listVersionID)">
																<xsl:attribute name="listVersionID" namespace="" select="fn:string($var79_listVersionID)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var78_name)">
																<xsl:attribute name="name" namespace="" select="fn:string($var78_name)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var77_languageID)">
																<xsl:attribute name="languageID" namespace="" select="fn:string($var77_languageID)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var76_listURI)">
																<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string($var76_listURI)))"/>
															</xsl:if>
															<xsl:if test="fn:exists($var75_listSchemeURI)">
																<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var75_listSchemeURI)))"/>
															</xsl:if>
															<xsl:sequence select="fn:string(.)"/>
														</cbc:IdentificationCode>
													</xsl:for-each>
													<xsl:for-each select="cbc:Name">
														<cbc:Name>
															<xsl:sequence select="(./@node(), ./node())"/>
														</cbc:Name>
													</xsl:for-each>
												</cac:Country>
											</xsl:for-each>
											<xsl:for-each select="cac:LocationCoordinate">
												<cac:LocationCoordinate>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cac:LocationCoordinate>
											</xsl:for-each>
										</cac:RegistrationAddress>
									</xsl:for-each>
									<xsl:for-each select="cac:CorporateRegistrationScheme">
										<cac:CorporateRegistrationScheme>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:CorporateRegistrationScheme>
									</xsl:for-each>
									<xsl:for-each select="cac:HeadOfficeParty">
										<cac:HeadOfficeParty>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:HeadOfficeParty>
									</xsl:for-each>
									<xsl:for-each select="cac:ShareholderParty">
										<cac:ShareholderParty>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:ShareholderParty>
									</xsl:for-each>
								</cac:PartyLegalEntity>
							</xsl:for-each>
							<xsl:for-each select="cac:Contact">
								<cac:Contact>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Contact>
							</xsl:for-each>
							<xsl:for-each select="cac:Person">
								<cac:Person>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Person>
							</xsl:for-each>
							<xsl:for-each select="cac:AgentParty">
								<cac:AgentParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:AgentParty>
							</xsl:for-each>
							<xsl:for-each select="cac:ServiceProviderParty">
								<cac:ServiceProviderParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ServiceProviderParty>
							</xsl:for-each>
							<xsl:for-each select="cac:PowerOfAttorney">
								<cac:PowerOfAttorney>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PowerOfAttorney>
							</xsl:for-each>
							<xsl:for-each select="cac:FinancialAccount">
								<cac:FinancialAccount>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:FinancialAccount>
							</xsl:for-each>
						</cac:Party>
					</xsl:for-each>
					<xsl:for-each select="$var4_resultof_first/cac:DeliveryContact">
						<cac:DeliveryContact>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:DeliveryContact>
					</xsl:for-each>
					<xsl:for-each select="$var4_resultof_first/cac:AccountingContact">
						<cac:AccountingContact>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:AccountingContact>
					</xsl:for-each>
					<xsl:for-each select="$var4_resultof_first/cac:BuyerContact">
						<cac:BuyerContact>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:BuyerContact>
					</xsl:for-each>
				</cac:AccountingCustomerParty>
				<xsl:for-each select="cac:TaxRepresentativeParty">
					<cac:TaxRepresentativeParty>
						<xsl:for-each select="cbc:MarkCareIndicator">
							<cbc:MarkCareIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
							</cbc:MarkCareIndicator>
						</xsl:for-each>
						<xsl:for-each select="cbc:MarkAttentionIndicator">
							<cbc:MarkAttentionIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
							</cbc:MarkAttentionIndicator>
						</xsl:for-each>
						<xsl:for-each select="cbc:WebsiteURI">
							<cbc:WebsiteURI>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:WebsiteURI>
						</xsl:for-each>
						<xsl:for-each select="cbc:LogoReferenceID">
							<cbc:LogoReferenceID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:LogoReferenceID>
						</xsl:for-each>
						<xsl:for-each select="cbc:EndpointID">
							<cbc:EndpointID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:EndpointID>
						</xsl:for-each>
						<xsl:for-each select="cbc:IndustryClassificationCode">
							<cbc:IndustryClassificationCode>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:IndustryClassificationCode>
						</xsl:for-each>
						<xsl:for-each select="cac:PartyIdentification">
							<cac:PartyIdentification>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PartyIdentification>
						</xsl:for-each>
						<xsl:for-each select="cac:PartyName">
							<cac:PartyName>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PartyName>
						</xsl:for-each>
						<xsl:for-each select="cac:Language">
							<cac:Language>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:Language>
						</xsl:for-each>
						<xsl:for-each select="cac:PostalAddress">
							<cac:PostalAddress>
								<xsl:for-each select="cbc:ID">
									<cbc:ID>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="cbc:AddressTypeCode">
									<cbc:AddressTypeCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:AddressTypeCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:AddressFormatCode">
									<cbc:AddressFormatCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:AddressFormatCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:Postbox">
									<cbc:Postbox>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Postbox>
								</xsl:for-each>
								<xsl:for-each select="cbc:Floor">
									<cbc:Floor>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Floor>
								</xsl:for-each>
								<xsl:for-each select="cbc:Room">
									<cbc:Room>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Room>
								</xsl:for-each>
								<xsl:for-each select="cbc:StreetName">
									<cbc:StreetName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:StreetName>
								</xsl:for-each>
								<xsl:for-each select="cbc:AdditionalStreetName">
									<cbc:AdditionalStreetName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:AdditionalStreetName>
								</xsl:for-each>
								<xsl:for-each select="cbc:BlockName">
									<cbc:BlockName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BlockName>
								</xsl:for-each>
								<xsl:for-each select="cbc:BuildingName">
									<cbc:BuildingName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BuildingName>
								</xsl:for-each>
								<xsl:for-each select="cbc:BuildingNumber">
									<cbc:BuildingNumber>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BuildingNumber>
								</xsl:for-each>
								<xsl:for-each select="cbc:InhouseMail">
									<cbc:InhouseMail>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:InhouseMail>
								</xsl:for-each>
								<xsl:for-each select="cbc:Department">
									<cbc:Department>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Department>
								</xsl:for-each>
								<xsl:for-each select="cbc:MarkAttention">
									<cbc:MarkAttention>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:MarkAttention>
								</xsl:for-each>
								<xsl:for-each select="cbc:MarkCare">
									<cbc:MarkCare>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:MarkCare>
								</xsl:for-each>
								<xsl:for-each select="cbc:PlotIdentification">
									<cbc:PlotIdentification>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:PlotIdentification>
								</xsl:for-each>
								<xsl:for-each select="cbc:CitySubdivisionName">
									<cbc:CitySubdivisionName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CitySubdivisionName>
								</xsl:for-each>
								<xsl:for-each select="cbc:CityName">
									<cbc:CityName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CityName>
								</xsl:for-each>
								<xsl:for-each select="cbc:PostalZone">
									<cbc:PostalZone>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:PostalZone>
								</xsl:for-each>
								<xsl:for-each select="cbc:CountrySubentity">
									<cbc:CountrySubentity>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CountrySubentity>
								</xsl:for-each>
								<xsl:for-each select="cbc:CountrySubentityCode">
									<cbc:CountrySubentityCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CountrySubentityCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:Region">
									<cbc:Region>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Region>
								</xsl:for-each>
								<xsl:for-each select="cbc:District">
									<cbc:District>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:District>
								</xsl:for-each>
								<xsl:for-each select="cbc:TimezoneOffset">
									<cbc:TimezoneOffset>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TimezoneOffset>
								</xsl:for-each>
								<xsl:for-each select="cac:AddressLine">
									<cac:AddressLine>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:AddressLine>
								</xsl:for-each>
								<xsl:for-each select="cac:Country">
									<cac:Country>
										<xsl:for-each select="cbc:IdentificationCode">
											<xsl:variable name="var83_listSchemeURI" as="node()?" select="@listSchemeURI"/>
											<xsl:variable name="var84_listURI" as="node()?" select="@listURI"/>
											<xsl:variable name="var85_languageID" as="node()?" select="@languageID"/>
											<xsl:variable name="var86_name" as="node()?" select="@name"/>
											<xsl:variable name="var87_listVersionID" as="node()?" select="@listVersionID"/>
											<xsl:variable name="var88_listName" as="node()?" select="@listName"/>
											<xsl:variable name="var89_listAgencyID" as="node()?" select="@listAgencyID"/>
											<xsl:variable name="var90_listAgencyName" as="node()?" select="@listAgencyName"/>
											<cbc:IdentificationCode>
												<xsl:attribute name="listID" namespace="" select="'ISO3166-1:Alpha2'"/>
												<xsl:if test="fn:exists($var89_listAgencyID)">
													<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var89_listAgencyID)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var90_listAgencyName)">
													<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var90_listAgencyName)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var88_listName)">
													<xsl:attribute name="listName" namespace="" select="fn:string($var88_listName)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var87_listVersionID)">
													<xsl:attribute name="listVersionID" namespace="" select="fn:string($var87_listVersionID)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var86_name)">
													<xsl:attribute name="name" namespace="" select="fn:string($var86_name)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var85_languageID)">
													<xsl:attribute name="languageID" namespace="" select="fn:string($var85_languageID)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var84_listURI)">
													<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string($var84_listURI)))"/>
												</xsl:if>
												<xsl:if test="fn:exists($var83_listSchemeURI)">
													<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var83_listSchemeURI)))"/>
												</xsl:if>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:IdentificationCode>
										</xsl:for-each>
										<xsl:for-each select="cbc:Name">
											<cbc:Name>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Name>
										</xsl:for-each>
									</cac:Country>
								</xsl:for-each>
								<xsl:for-each select="cac:LocationCoordinate">
									<cac:LocationCoordinate>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:LocationCoordinate>
								</xsl:for-each>
							</cac:PostalAddress>
						</xsl:for-each>
						<xsl:for-each select="cac:PhysicalLocation">
							<cac:PhysicalLocation>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PhysicalLocation>
						</xsl:for-each>
						<xsl:for-each select="cac:PartyTaxScheme">
							<cac:PartyTaxScheme>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PartyTaxScheme>
						</xsl:for-each>
						<xsl:for-each select="cac:PartyLegalEntity">
							<cac:PartyLegalEntity>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PartyLegalEntity>
						</xsl:for-each>
						<xsl:for-each select="cac:Contact">
							<cac:Contact>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:Contact>
						</xsl:for-each>
						<xsl:for-each select="cac:Person">
							<cac:Person>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:Person>
						</xsl:for-each>
						<xsl:for-each select="cac:AgentParty">
							<cac:AgentParty>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:AgentParty>
						</xsl:for-each>
						<xsl:for-each select="cac:ServiceProviderParty">
							<cac:ServiceProviderParty>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:ServiceProviderParty>
						</xsl:for-each>
						<xsl:for-each select="cac:PowerOfAttorney">
							<cac:PowerOfAttorney>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PowerOfAttorney>
						</xsl:for-each>
						<xsl:for-each select="cac:FinancialAccount">
							<cac:FinancialAccount>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:FinancialAccount>
						</xsl:for-each>
					</cac:TaxRepresentativeParty>
				</xsl:for-each>
				<xsl:for-each select="cac:Delivery">
					<cac:Delivery>
						<xsl:for-each select="cbc:ID">
							<cbc:ID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:ID>
						</xsl:for-each>
						<xsl:for-each select="cbc:Quantity">
							<cbc:Quantity>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:Quantity>
						</xsl:for-each>
						<xsl:for-each select="cbc:MinimumQuantity">
							<cbc:MinimumQuantity>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:MinimumQuantity>
						</xsl:for-each>
						<xsl:for-each select="cbc:MaximumQuantity">
							<cbc:MaximumQuantity>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:MaximumQuantity>
						</xsl:for-each>
						<xsl:for-each select="cbc:ActualDeliveryDate">
							<cbc:ActualDeliveryDate>
								<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
							</cbc:ActualDeliveryDate>
						</xsl:for-each>
						<xsl:for-each select="cbc:ActualDeliveryTime">
							<cbc:ActualDeliveryTime>
								<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
							</cbc:ActualDeliveryTime>
						</xsl:for-each>
						<xsl:for-each select="cbc:LatestDeliveryDate">
							<cbc:LatestDeliveryDate>
								<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
							</cbc:LatestDeliveryDate>
						</xsl:for-each>
						<xsl:for-each select="cbc:LatestDeliveryTime">
							<cbc:LatestDeliveryTime>
								<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
							</cbc:LatestDeliveryTime>
						</xsl:for-each>
						<xsl:for-each select="cbc:ReleaseID">
							<cbc:ReleaseID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:ReleaseID>
						</xsl:for-each>
						<xsl:for-each select="cbc:TrackingID">
							<cbc:TrackingID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:TrackingID>
						</xsl:for-each>
						<xsl:for-each select="cac:DeliveryAddress">
							<cac:DeliveryAddress>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:DeliveryAddress>
						</xsl:for-each>
						<xsl:for-each select="cac:DeliveryLocation">
							<cac:DeliveryLocation>
								<xsl:for-each select="cbc:ID">
									<cbc:ID>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="cbc:Description">
									<cbc:Description>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Description>
								</xsl:for-each>
								<xsl:for-each select="cbc:Conditions">
									<cbc:Conditions>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Conditions>
								</xsl:for-each>
								<xsl:for-each select="cbc:CountrySubentity">
									<cbc:CountrySubentity>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CountrySubentity>
								</xsl:for-each>
								<xsl:for-each select="cbc:CountrySubentityCode">
									<cbc:CountrySubentityCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CountrySubentityCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:LocationTypeCode">
									<cbc:LocationTypeCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:LocationTypeCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:InformationURI">
									<cbc:InformationURI>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:InformationURI>
								</xsl:for-each>
								<xsl:for-each select="cbc:Name">
									<cbc:Name>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Name>
								</xsl:for-each>
								<xsl:for-each select="cac:ValidityPeriod">
									<cac:ValidityPeriod>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:ValidityPeriod>
								</xsl:for-each>
								<xsl:for-each select="cac:Address">
									<cac:Address>
										<xsl:for-each select="cbc:ID">
											<cbc:ID>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:ID>
										</xsl:for-each>
										<xsl:for-each select="cbc:AddressTypeCode">
											<cbc:AddressTypeCode>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:AddressTypeCode>
										</xsl:for-each>
										<xsl:for-each select="cbc:AddressFormatCode">
											<cbc:AddressFormatCode>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:AddressFormatCode>
										</xsl:for-each>
										<xsl:for-each select="cbc:Postbox">
											<cbc:Postbox>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Postbox>
										</xsl:for-each>
										<xsl:for-each select="cbc:Floor">
											<cbc:Floor>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Floor>
										</xsl:for-each>
										<xsl:for-each select="cbc:Room">
											<cbc:Room>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Room>
										</xsl:for-each>
										<xsl:for-each select="cbc:StreetName">
											<cbc:StreetName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:StreetName>
										</xsl:for-each>
										<xsl:for-each select="cbc:AdditionalStreetName">
											<cbc:AdditionalStreetName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:AdditionalStreetName>
										</xsl:for-each>
										<xsl:for-each select="cbc:BlockName">
											<cbc:BlockName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:BlockName>
										</xsl:for-each>
										<xsl:for-each select="cbc:BuildingName">
											<cbc:BuildingName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:BuildingName>
										</xsl:for-each>
										<xsl:for-each select="cbc:BuildingNumber">
											<cbc:BuildingNumber>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:BuildingNumber>
										</xsl:for-each>
										<xsl:for-each select="cbc:InhouseMail">
											<cbc:InhouseMail>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:InhouseMail>
										</xsl:for-each>
										<xsl:for-each select="cbc:Department">
											<cbc:Department>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Department>
										</xsl:for-each>
										<xsl:for-each select="cbc:MarkAttention">
											<cbc:MarkAttention>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:MarkAttention>
										</xsl:for-each>
										<xsl:for-each select="cbc:MarkCare">
											<cbc:MarkCare>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:MarkCare>
										</xsl:for-each>
										<xsl:for-each select="cbc:PlotIdentification">
											<cbc:PlotIdentification>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:PlotIdentification>
										</xsl:for-each>
										<xsl:for-each select="cbc:CitySubdivisionName">
											<cbc:CitySubdivisionName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:CitySubdivisionName>
										</xsl:for-each>
										<xsl:for-each select="cbc:CityName">
											<cbc:CityName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:CityName>
										</xsl:for-each>
										<xsl:for-each select="cbc:PostalZone">
											<cbc:PostalZone>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:PostalZone>
										</xsl:for-each>
										<xsl:for-each select="cbc:CountrySubentity">
											<cbc:CountrySubentity>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:CountrySubentity>
										</xsl:for-each>
										<xsl:for-each select="cbc:CountrySubentityCode">
											<cbc:CountrySubentityCode>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:CountrySubentityCode>
										</xsl:for-each>
										<xsl:for-each select="cbc:Region">
											<cbc:Region>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Region>
										</xsl:for-each>
										<xsl:for-each select="cbc:District">
											<cbc:District>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:District>
										</xsl:for-each>
										<xsl:for-each select="cbc:TimezoneOffset">
											<cbc:TimezoneOffset>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:TimezoneOffset>
										</xsl:for-each>
										<xsl:for-each select="cac:AddressLine">
											<cac:AddressLine>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cac:AddressLine>
										</xsl:for-each>
										<xsl:for-each select="cac:Country">
											<cac:Country>
												<xsl:for-each select="cbc:IdentificationCode">
													<xsl:variable name="var91_listSchemeURI" as="node()?" select="@listSchemeURI"/>
													<xsl:variable name="var92_listURI" as="node()?" select="@listURI"/>
													<xsl:variable name="var93_languageID" as="node()?" select="@languageID"/>
													<xsl:variable name="var94_name" as="node()?" select="@name"/>
													<xsl:variable name="var95_listVersionID" as="node()?" select="@listVersionID"/>
													<xsl:variable name="var96_listName" as="node()?" select="@listName"/>
													<xsl:variable name="var97_listAgencyID" as="node()?" select="@listAgencyID"/>
													<xsl:variable name="var98_listAgencyName" as="node()?" select="@listAgencyName"/>
													<cbc:IdentificationCode>
														<xsl:attribute name="listID" namespace="" select="'ISO3166-1:Alpha2'"/>
														<xsl:if test="fn:exists($var97_listAgencyID)">
															<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var97_listAgencyID)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var98_listAgencyName)">
															<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var98_listAgencyName)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var96_listName)">
															<xsl:attribute name="listName" namespace="" select="fn:string($var96_listName)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var95_listVersionID)">
															<xsl:attribute name="listVersionID" namespace="" select="fn:string($var95_listVersionID)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var94_name)">
															<xsl:attribute name="name" namespace="" select="fn:string($var94_name)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var93_languageID)">
															<xsl:attribute name="languageID" namespace="" select="fn:string($var93_languageID)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var92_listURI)">
															<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string($var92_listURI)))"/>
														</xsl:if>
														<xsl:if test="fn:exists($var91_listSchemeURI)">
															<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var91_listSchemeURI)))"/>
														</xsl:if>
														<xsl:sequence select="fn:string(.)"/>
													</cbc:IdentificationCode>
												</xsl:for-each>
												<xsl:for-each select="cbc:Name">
													<cbc:Name>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:Name>
												</xsl:for-each>
											</cac:Country>
										</xsl:for-each>
										<xsl:for-each select="cac:LocationCoordinate">
											<cac:LocationCoordinate>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cac:LocationCoordinate>
										</xsl:for-each>
									</cac:Address>
								</xsl:for-each>
								<xsl:for-each select="cac:SubsidiaryLocation">
									<cac:SubsidiaryLocation>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:SubsidiaryLocation>
								</xsl:for-each>
								<xsl:for-each select="cac:LocationCoordinate">
									<cac:LocationCoordinate>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:LocationCoordinate>
								</xsl:for-each>
							</cac:DeliveryLocation>
						</xsl:for-each>
						<xsl:for-each select="cac:AlternativeDeliveryLocation">
							<cac:AlternativeDeliveryLocation>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:AlternativeDeliveryLocation>
						</xsl:for-each>
						<xsl:for-each select="cac:RequestedDeliveryPeriod">
							<cac:RequestedDeliveryPeriod>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:RequestedDeliveryPeriod>
						</xsl:for-each>
						<xsl:for-each select="cac:PromisedDeliveryPeriod">
							<cac:PromisedDeliveryPeriod>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PromisedDeliveryPeriod>
						</xsl:for-each>
						<xsl:for-each select="cac:EstimatedDeliveryPeriod">
							<cac:EstimatedDeliveryPeriod>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:EstimatedDeliveryPeriod>
						</xsl:for-each>
						<xsl:for-each select="cac:CarrierParty">
							<cac:CarrierParty>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:CarrierParty>
						</xsl:for-each>
						<xsl:for-each select="cac:DeliveryParty">
							<cac:DeliveryParty>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:DeliveryParty>
						</xsl:for-each>
						<xsl:for-each select="cac:NotifyParty">
							<cac:NotifyParty>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:NotifyParty>
						</xsl:for-each>
						<xsl:for-each select="cac:Despatch">
							<cac:Despatch>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:Despatch>
						</xsl:for-each>
						<xsl:for-each select="cac:DeliveryTerms">
							<cac:DeliveryTerms>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:DeliveryTerms>
						</xsl:for-each>
						<xsl:for-each select="cac:MinimumDeliveryUnit">
							<cac:MinimumDeliveryUnit>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:MinimumDeliveryUnit>
						</xsl:for-each>
						<xsl:for-each select="cac:MaximumDeliveryUnit">
							<cac:MaximumDeliveryUnit>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:MaximumDeliveryUnit>
						</xsl:for-each>
						<xsl:for-each select="cac:Shipment">
							<cac:Shipment>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:Shipment>
						</xsl:for-each>
					</cac:Delivery>
				</xsl:for-each>
				<xsl:for-each select="cac:PaymentMeans">
					<xsl:variable name="var99_resultof_first" as="node()" select="cbc:PaymentMeansCode"/>
					<xsl:variable name="var100_listSchemeURI" as="node()?" select="$var99_resultof_first/@listSchemeURI"/>
					<xsl:variable name="var101_listURI" as="node()?" select="$var99_resultof_first/@listURI"/>
					<xsl:variable name="var102_languageID" as="node()?" select="$var99_resultof_first/@languageID"/>
					<xsl:variable name="var103_name" as="node()?" select="$var99_resultof_first/@name"/>
					<xsl:variable name="var104_listVersionID" as="node()?" select="$var99_resultof_first/@listVersionID"/>
					<xsl:variable name="var105_listName" as="node()?" select="$var99_resultof_first/@listName"/>
					<xsl:variable name="var106_listAgencyName" as="node()?" select="$var99_resultof_first/@listAgencyName"/>
					<xsl:variable name="var107_listAgencyID" as="node()?" select="$var99_resultof_first/@listAgencyID"/>
					<cac:PaymentMeans>
						<xsl:for-each select="cbc:ID">
							<cbc:ID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:ID>
						</xsl:for-each>
						<cbc:PaymentMeansCode>
							<xsl:attribute name="listID" namespace="" select="'UNCL4461'"/>
							<xsl:if test="fn:exists($var107_listAgencyID)">
								<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var107_listAgencyID)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var106_listAgencyName)">
								<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var106_listAgencyName)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var105_listName)">
								<xsl:attribute name="listName" namespace="" select="fn:string($var105_listName)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var104_listVersionID)">
								<xsl:attribute name="listVersionID" namespace="" select="fn:string($var104_listVersionID)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var103_name)">
								<xsl:attribute name="name" namespace="" select="fn:string($var103_name)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var102_languageID)">
								<xsl:attribute name="languageID" namespace="" select="fn:string($var102_languageID)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var101_listURI)">
								<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string($var101_listURI)))"/>
							</xsl:if>
							<xsl:if test="fn:exists($var100_listSchemeURI)">
								<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var100_listSchemeURI)))"/>
							</xsl:if>
							<xsl:sequence select="fn:string($var99_resultof_first)"/>
						</cbc:PaymentMeansCode>
						<xsl:for-each select="cbc:PaymentDueDate">
							<cbc:PaymentDueDate>
								<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
							</cbc:PaymentDueDate>
						</xsl:for-each>
						<xsl:for-each select="cbc:PaymentChannelCode">
							<cbc:PaymentChannelCode>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:PaymentChannelCode>
						</xsl:for-each>
						<xsl:for-each select="cbc:InstructionID">
							<cbc:InstructionID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:InstructionID>
						</xsl:for-each>
						<xsl:for-each select="cbc:InstructionNote">
							<cbc:InstructionNote>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:InstructionNote>
						</xsl:for-each>
						<xsl:for-each select="cbc:PaymentID">
							<cbc:PaymentID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:PaymentID>
						</xsl:for-each>
						<xsl:for-each select="cac:CardAccount">
							<cac:CardAccount>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:CardAccount>
						</xsl:for-each>
						<xsl:for-each select="cac:PayerFinancialAccount">
							<cac:PayerFinancialAccount>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PayerFinancialAccount>
						</xsl:for-each>
						<xsl:for-each select="cac:PayeeFinancialAccount">
							<cac:PayeeFinancialAccount>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PayeeFinancialAccount>
						</xsl:for-each>
						<xsl:for-each select="cac:CreditAccount">
							<cac:CreditAccount>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:CreditAccount>
						</xsl:for-each>
						<xsl:for-each select="cac:PaymentMandate">
							<cac:PaymentMandate>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PaymentMandate>
						</xsl:for-each>
						<xsl:for-each select="cac:TradeFinancing">
							<cac:TradeFinancing>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:TradeFinancing>
						</xsl:for-each>
					</cac:PaymentMeans>
				</xsl:for-each>
				<xsl:for-each select="cac:PaymentTerms">
					<cac:PaymentTerms>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cac:PaymentTerms>
				</xsl:for-each>
				<xsl:for-each select="cac:AllowanceCharge">
					<xsl:variable name="var108_resultof_first" as="node()" select="cbc:Amount"/>
					<cac:AllowanceCharge>
						<xsl:for-each select="cbc:ID">
							<cbc:ID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:ID>
						</xsl:for-each>
						<cbc:ChargeIndicator>
							<xsl:sequence select="xs:string(xs:boolean(fn:string(cbc:ChargeIndicator)))"/>
						</cbc:ChargeIndicator>
						<xsl:for-each select="cbc:AllowanceChargeReasonCode">
							<xsl:variable name="var109_listSchemeURI" as="node()?" select="@listSchemeURI"/>
							<xsl:variable name="var110_listURI" as="node()?" select="@listURI"/>
							<xsl:variable name="var111_languageID" as="node()?" select="@languageID"/>
							<xsl:variable name="var112_name" as="node()?" select="@name"/>
							<xsl:variable name="var113_listVersionID" as="node()?" select="@listVersionID"/>
							<xsl:variable name="var114_listName" as="node()?" select="@listName"/>
							<xsl:variable name="var115_listAgencyID" as="node()?" select="@listAgencyID"/>
							<xsl:variable name="var116_listAgencyName" as="node()?" select="@listAgencyName"/>
							<cbc:AllowanceChargeReasonCode>
								<xsl:attribute name="listID" namespace="" select="'UNCL4465'"/>
								<xsl:if test="fn:exists($var115_listAgencyID)">
									<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var115_listAgencyID)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var116_listAgencyName)">
									<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var116_listAgencyName)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var114_listName)">
									<xsl:attribute name="listName" namespace="" select="fn:string($var114_listName)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var113_listVersionID)">
									<xsl:attribute name="listVersionID" namespace="" select="fn:string($var113_listVersionID)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var112_name)">
									<xsl:attribute name="name" namespace="" select="fn:string($var112_name)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var111_languageID)">
									<xsl:attribute name="languageID" namespace="" select="fn:string($var111_languageID)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var110_listURI)">
									<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string($var110_listURI)))"/>
								</xsl:if>
								<xsl:if test="fn:exists($var109_listSchemeURI)">
									<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var109_listSchemeURI)))"/>
								</xsl:if>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:AllowanceChargeReasonCode>
						</xsl:for-each>
						<xsl:for-each select="cbc:AllowanceChargeReason">
							<cbc:AllowanceChargeReason>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:AllowanceChargeReason>
						</xsl:for-each>
						<xsl:for-each select="cbc:MultiplierFactorNumeric">
							<cbc:MultiplierFactorNumeric>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:MultiplierFactorNumeric>
						</xsl:for-each>
						<xsl:for-each select="cbc:PrepaidIndicator">
							<cbc:PrepaidIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
							</cbc:PrepaidIndicator>
						</xsl:for-each>
						<xsl:for-each select="cbc:SequenceNumeric">
							<cbc:SequenceNumeric>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:SequenceNumeric>
						</xsl:for-each>
						<cbc:Amount>
							<xsl:sequence select="($var108_resultof_first/@node(), $var108_resultof_first/node())"/>
						</cbc:Amount>
						<xsl:for-each select="cbc:BaseAmount">
							<cbc:BaseAmount>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:BaseAmount>
						</xsl:for-each>
						<xsl:for-each select="cbc:AccountingCostCode">
							<cbc:AccountingCostCode>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:AccountingCostCode>
						</xsl:for-each>
						<xsl:for-each select="cbc:AccountingCost">
							<cbc:AccountingCost>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:AccountingCost>
						</xsl:for-each>
						<xsl:for-each select="cbc:PerUnitAmount">
							<cbc:PerUnitAmount>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:PerUnitAmount>
						</xsl:for-each>
						<xsl:for-each select="cac:TaxCategory">
							<xsl:variable name="var117_resultof_first" as="node()" select="cac:TaxScheme"/>
							<cac:TaxCategory>
								<xsl:for-each select="cbc:ID">
									<xsl:variable name="var118_schemeURI" as="node()?" select="@schemeURI"/>
									<xsl:variable name="var119_schemeDataURI" as="node()?" select="@schemeDataURI"/>
									<xsl:variable name="var120_schemeVersionID" as="node()?" select="@schemeVersionID"/>
									<xsl:variable name="var121_schemeAgencyName" as="node()?" select="@schemeAgencyName"/>
									<xsl:variable name="var122_schemeName" as="node()?" select="@schemeName"/>
									<xsl:variable name="var123_schemeAgencyID" as="node()?" select="@schemeAgencyID"/>
									<cbc:ID>
										<xsl:attribute name="schemeID" namespace="" select="'UNCL5305'"/>
										<xsl:if test="fn:exists($var122_schemeName)">
											<xsl:attribute name="schemeName" namespace="" select="fn:string($var122_schemeName)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var123_schemeAgencyID)">
											<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string($var123_schemeAgencyID)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var121_schemeAgencyName)">
											<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string($var121_schemeAgencyName)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var120_schemeVersionID)">
											<xsl:attribute name="schemeVersionID" namespace="" select="fn:string($var120_schemeVersionID)"/>
										</xsl:if>
										<xsl:if test="fn:exists($var119_schemeDataURI)">
											<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string($var119_schemeDataURI)))"/>
										</xsl:if>
										<xsl:if test="fn:exists($var118_schemeURI)">
											<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var118_schemeURI)))"/>
										</xsl:if>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="cbc:Name">
									<cbc:Name>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Name>
								</xsl:for-each>
								<xsl:for-each select="cbc:Percent">
									<cbc:Percent>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Percent>
								</xsl:for-each>
								<xsl:for-each select="cbc:BaseUnitMeasure">
									<cbc:BaseUnitMeasure>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BaseUnitMeasure>
								</xsl:for-each>
								<xsl:for-each select="cbc:PerUnitAmount">
									<cbc:PerUnitAmount>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:PerUnitAmount>
								</xsl:for-each>
								<xsl:for-each select="cbc:TaxExemptionReasonCode">
									<cbc:TaxExemptionReasonCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TaxExemptionReasonCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:TaxExemptionReason">
									<cbc:TaxExemptionReason>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TaxExemptionReason>
								</xsl:for-each>
								<xsl:for-each select="cbc:TierRange">
									<cbc:TierRange>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TierRange>
								</xsl:for-each>
								<xsl:for-each select="cbc:TierRatePercent">
									<cbc:TierRatePercent>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TierRatePercent>
								</xsl:for-each>
								<cac:TaxScheme>
									<xsl:sequence select="($var117_resultof_first/@node(), $var117_resultof_first/node())"/>
								</cac:TaxScheme>
							</cac:TaxCategory>
						</xsl:for-each>
						<xsl:for-each select="cac:TaxTotal">
							<cac:TaxTotal>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:TaxTotal>
						</xsl:for-each>
						<xsl:for-each select="cac:PaymentMeans">
							<cac:PaymentMeans>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PaymentMeans>
						</xsl:for-each>
					</cac:AllowanceCharge>
				</xsl:for-each>
				<xsl:variable name="var134_resultof_map" as="node()*" select="$var14_resultof_map"/>
				<xsl:for-each select="$var134_resultof_map">
					<xsl:call-template name="agt:MapToUBL-Invoice-2_1_var133_function">
						<xsl:with-param name="val0" select="$var162_current" as="node()"/>
						<xsl:with-param name="par0" select="." as="node()"/>
					</xsl:call-template>
				</xsl:for-each>
				<cac:TaxTotal>
					<xsl:variable name="var135_resultof_map" as="node()*" select="$var10_resultof_map"/>
					<xsl:for-each select="$var135_resultof_map/cbc:TaxAmount">
						<cbc:TaxAmount>
							<xsl:if test="fn:exists(@currencyID)">
								<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
							</xsl:if>
							<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
						</cbc:TaxAmount>
					</xsl:for-each>
					<xsl:variable name="var140_resultof_map" as="node()*" select="$var10_resultof_map"/>
					<xsl:for-each select="$var140_resultof_map/cac:TaxSubtotal">
						<cac:TaxSubtotal>
							<xsl:for-each select="cbc:TaxableAmount">
								<cbc:TaxableAmount>
									<xsl:if test="fn:exists(@currencyID)">
										<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
									</xsl:if>
									<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
								</cbc:TaxableAmount>
							</xsl:for-each>
							<xsl:for-each select="cbc:TaxAmount">
								<cbc:TaxAmount>
									<xsl:if test="fn:exists(@currencyID)">
										<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
									</xsl:if>
									<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
								</cbc:TaxAmount>
							</xsl:for-each>
							<xsl:variable name="var139_resultof_map" as="node()*">
								<xsl:for-each-group select="$var2_TaxTotal" group-by="fn:string(cbc:TaxAmount/@currencyID)">
									<xsl:variable name="var138_resultof_group_items" as="item()+" select="current-group()"/>
									<xsl:variable name="var137_resultof_filter" as="node()*">
										<xsl:for-each select="$var1_DocumentCurrencyCode">
											<xsl:variable name="var136_current" as="node()" select="."/>
											<xsl:if test="fn:exists($var138_resultof_group_items[(fn:string($var136_current) = fn:string(cbc:TaxAmount/@currencyID))])">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:if test="fn:not(fn:exists($var137_resultof_filter))">
										<TaxTotal xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:n0="urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2" xmlns:n1="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:qdt="urn:oasis:names:specification:ubl:schema:xsd:QualifiedDataTypes-2" xmlns:sac="urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2" xmlns:sbc="urn:oasis:names:specification:ubl:schema:xsd:SignatureBasicComponents-2" xmlns:udt="urn:oasis:names:specification:ubl:schema:xsd:UnqualifiedDataTypes-2" xmlns:ccts-cct="urn:un:unece:uncefact:data:specification:CoreComponentTypeSchemaModule:2">
											<xsl:for-each select="current-group()">
												<cbc:TaxAmount>
													<xsl:sequence select="xs:string(xs:decimal(fn:string(cbc:TaxAmount)))"/>
												</cbc:TaxAmount>
											</xsl:for-each>
											<TaxSubtotal>
												<xsl:for-each select="current-group()/cac:TaxSubtotal">
													<cbc:TaxAmount>
														<xsl:attribute name="currencyID" namespace="" select="fn:string(cbc:TaxAmount/@currencyID)"/>
														<xsl:sequence select="xs:string(xs:decimal(fn:string(cbc:TaxAmount)))"/>
													</cbc:TaxAmount>
												</xsl:for-each>
											</TaxSubtotal>
										</TaxTotal>
									</xsl:if>
								</xsl:for-each-group>
							</xsl:variable>
							<xsl:for-each select="$var139_resultof_map/cac:TaxSubtotal/cbc:TaxAmount">
								<cbc:TransactionCurrencyTaxAmount>
									<xsl:if test="fn:exists(@currencyID)">
										<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
									</xsl:if>
									<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
								</cbc:TransactionCurrencyTaxAmount>
							</xsl:for-each>
							<xsl:for-each select="cac:TaxCategory">
								<cac:TaxCategory>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:attribute name="schemeID" namespace="" select="'UNCL5305'"/>
											<xsl:if test="fn:exists(@schemeName)">
												<xsl:attribute name="schemeName" namespace="" select="fn:string(@schemeName)"/>
											</xsl:if>
											<xsl:if test="fn:exists(@schemeAgencyID)">
												<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(@schemeAgencyID)"/>
											</xsl:if>
											<xsl:if test="fn:exists(@schemeAgencyName)">
												<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(@schemeAgencyName)"/>
											</xsl:if>
											<xsl:if test="fn:exists(@schemeVersionID)">
												<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(@schemeVersionID)"/>
											</xsl:if>
											<xsl:if test="fn:exists(@schemeDataURI)">
												<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(@schemeDataURI)))"/>
											</xsl:if>
											<xsl:if test="fn:exists(@schemeURI)">
												<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(@schemeURI)))"/>
											</xsl:if>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:Name">
										<cbc:Name>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Name>
									</xsl:for-each>
									<xsl:for-each select="cbc:Percent">
										<cbc:Percent>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Percent>
									</xsl:for-each>
									<xsl:for-each select="cbc:BaseUnitMeasure">
										<cbc:BaseUnitMeasure>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BaseUnitMeasure>
									</xsl:for-each>
									<xsl:for-each select="cbc:PerUnitAmount">
										<cbc:PerUnitAmount>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PerUnitAmount>
									</xsl:for-each>
									<xsl:for-each select="cbc:TaxExemptionReasonCode">
										<cbc:TaxExemptionReasonCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TaxExemptionReasonCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:TaxExemptionReason">
										<cbc:TaxExemptionReason>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TaxExemptionReason>
									</xsl:for-each>
									<xsl:for-each select="cbc:TierRange">
										<cbc:TierRange>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TierRange>
									</xsl:for-each>
									<xsl:for-each select="cbc:TierRatePercent">
										<cbc:TierRatePercent>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TierRatePercent>
									</xsl:for-each>
									<xsl:for-each select="cac:TaxScheme">
										<cac:TaxScheme>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:TaxScheme>
									</xsl:for-each>
								</cac:TaxCategory>
							</xsl:for-each>
						</cac:TaxSubtotal>
					</xsl:for-each>
				</cac:TaxTotal>
				<cac:LegalMonetaryTotal>
					<xsl:sequence select="($var5_resultof_first/@node(), $var5_resultof_first/node())"/>
				</cac:LegalMonetaryTotal>
				<xsl:for-each select="cac:InvoiceLine">
					<xsl:variable name="var141_resultof_first" as="node()" select="cbc:LineExtensionAmount"/>
					<xsl:variable name="var142_resultof_first" as="node()" select="cbc:ID"/>
					<xsl:variable name="var143_resultof_first" as="node()" select="cac:Item"/>
					<cac:InvoiceLine>
						<cbc:ID>
							<xsl:sequence select="($var142_resultof_first/@node(), $var142_resultof_first/node())"/>
						</cbc:ID>
						<xsl:for-each select="cbc:UUID">
							<cbc:UUID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:UUID>
						</xsl:for-each>
						<xsl:for-each select="cbc:Note">
							<cbc:Note>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:Note>
						</xsl:for-each>
						<xsl:for-each select="cbc:InvoicedQuantity">
							<xsl:variable name="var144_unitCodeListAgencyName" as="node()?" select="@unitCodeListAgencyName"/>
							<xsl:variable name="var145_unitCode" as="node()?" select="@unitCode"/>
							<xsl:variable name="var146_unitCodeListAgencyID" as="node()?" select="@unitCodeListAgencyID"/>
							<cbc:InvoicedQuantity>
								<xsl:if test="fn:exists($var145_unitCode)">
									<xsl:attribute name="unitCode" namespace="" select="fn:string($var145_unitCode)"/>
								</xsl:if>
								<xsl:attribute name="unitCodeListID" namespace="" select="'UNECERec20'"/>
								<xsl:if test="fn:exists($var146_unitCodeListAgencyID)">
									<xsl:attribute name="unitCodeListAgencyID" namespace="" select="fn:string($var146_unitCodeListAgencyID)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var144_unitCodeListAgencyName)">
									<xsl:attribute name="unitCodeListAgencyName" namespace="" select="fn:string($var144_unitCodeListAgencyName)"/>
								</xsl:if>
								<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
							</cbc:InvoicedQuantity>
						</xsl:for-each>
						<cbc:LineExtensionAmount>
							<xsl:sequence select="($var141_resultof_first/@node(), $var141_resultof_first/node())"/>
						</cbc:LineExtensionAmount>
						<xsl:for-each select="cbc:TaxPointDate">
							<cbc:TaxPointDate>
								<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
							</cbc:TaxPointDate>
						</xsl:for-each>
						<xsl:for-each select="cbc:AccountingCostCode">
							<cbc:AccountingCostCode>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:AccountingCostCode>
						</xsl:for-each>
						<xsl:for-each select="cbc:AccountingCost">
							<cbc:AccountingCost>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:AccountingCost>
						</xsl:for-each>
						<xsl:for-each select="cbc:PaymentPurposeCode">
							<cbc:PaymentPurposeCode>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:PaymentPurposeCode>
						</xsl:for-each>
						<xsl:for-each select="cbc:FreeOfChargeIndicator">
							<cbc:FreeOfChargeIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
							</cbc:FreeOfChargeIndicator>
						</xsl:for-each>
						<xsl:for-each select="cac:InvoicePeriod">
							<cac:InvoicePeriod>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:InvoicePeriod>
						</xsl:for-each>
						<xsl:for-each select="cac:OrderLineReference">
							<cac:OrderLineReference>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:OrderLineReference>
						</xsl:for-each>
						<xsl:for-each select="cac:DespatchLineReference">
							<cac:DespatchLineReference>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:DespatchLineReference>
						</xsl:for-each>
						<xsl:for-each select="cac:ReceiptLineReference">
							<cac:ReceiptLineReference>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:ReceiptLineReference>
						</xsl:for-each>
						<xsl:for-each select="cac:BillingReference">
							<cac:BillingReference>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:BillingReference>
						</xsl:for-each>
						<xsl:for-each select="cac:DocumentReference">
							<cac:DocumentReference>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:DocumentReference>
						</xsl:for-each>
						<xsl:for-each select="cac:PricingReference">
							<cac:PricingReference>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PricingReference>
						</xsl:for-each>
						<xsl:for-each select="cac:OriginatorParty">
							<cac:OriginatorParty>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:OriginatorParty>
						</xsl:for-each>
						<xsl:for-each select="cac:Delivery">
							<cac:Delivery>
								<xsl:for-each select="cbc:ID">
									<cbc:ID>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="cbc:Quantity">
									<cbc:Quantity>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Quantity>
								</xsl:for-each>
								<xsl:for-each select="cbc:MinimumQuantity">
									<cbc:MinimumQuantity>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:MinimumQuantity>
								</xsl:for-each>
								<xsl:for-each select="cbc:MaximumQuantity">
									<cbc:MaximumQuantity>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:MaximumQuantity>
								</xsl:for-each>
								<xsl:for-each select="cbc:ActualDeliveryDate">
									<cbc:ActualDeliveryDate>
										<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
									</cbc:ActualDeliveryDate>
								</xsl:for-each>
								<xsl:for-each select="cbc:ActualDeliveryTime">
									<cbc:ActualDeliveryTime>
										<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
									</cbc:ActualDeliveryTime>
								</xsl:for-each>
								<xsl:for-each select="cbc:LatestDeliveryDate">
									<cbc:LatestDeliveryDate>
										<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
									</cbc:LatestDeliveryDate>
								</xsl:for-each>
								<xsl:for-each select="cbc:LatestDeliveryTime">
									<cbc:LatestDeliveryTime>
										<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
									</cbc:LatestDeliveryTime>
								</xsl:for-each>
								<xsl:for-each select="cbc:ReleaseID">
									<cbc:ReleaseID>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:ReleaseID>
								</xsl:for-each>
								<xsl:for-each select="cbc:TrackingID">
									<cbc:TrackingID>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TrackingID>
								</xsl:for-each>
								<xsl:for-each select="cac:DeliveryAddress">
									<cac:DeliveryAddress>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:DeliveryAddress>
								</xsl:for-each>
								<xsl:for-each select="cac:DeliveryLocation">
									<cac:DeliveryLocation>
										<xsl:for-each select="cbc:ID">
											<cbc:ID>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:ID>
										</xsl:for-each>
										<xsl:for-each select="cbc:Description">
											<cbc:Description>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Description>
										</xsl:for-each>
										<xsl:for-each select="cbc:Conditions">
											<cbc:Conditions>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Conditions>
										</xsl:for-each>
										<xsl:for-each select="cbc:CountrySubentity">
											<cbc:CountrySubentity>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:CountrySubentity>
										</xsl:for-each>
										<xsl:for-each select="cbc:CountrySubentityCode">
											<cbc:CountrySubentityCode>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:CountrySubentityCode>
										</xsl:for-each>
										<xsl:for-each select="cbc:LocationTypeCode">
											<cbc:LocationTypeCode>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:LocationTypeCode>
										</xsl:for-each>
										<xsl:for-each select="cbc:InformationURI">
											<cbc:InformationURI>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:InformationURI>
										</xsl:for-each>
										<xsl:for-each select="cbc:Name">
											<cbc:Name>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Name>
										</xsl:for-each>
										<xsl:for-each select="cac:ValidityPeriod">
											<cac:ValidityPeriod>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cac:ValidityPeriod>
										</xsl:for-each>
										<xsl:for-each select="cac:Address">
											<cac:Address>
												<xsl:for-each select="cbc:ID">
													<cbc:ID>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:ID>
												</xsl:for-each>
												<xsl:for-each select="cbc:AddressTypeCode">
													<cbc:AddressTypeCode>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:AddressTypeCode>
												</xsl:for-each>
												<xsl:for-each select="cbc:AddressFormatCode">
													<cbc:AddressFormatCode>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:AddressFormatCode>
												</xsl:for-each>
												<xsl:for-each select="cbc:Postbox">
													<cbc:Postbox>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:Postbox>
												</xsl:for-each>
												<xsl:for-each select="cbc:Floor">
													<cbc:Floor>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:Floor>
												</xsl:for-each>
												<xsl:for-each select="cbc:Room">
													<cbc:Room>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:Room>
												</xsl:for-each>
												<xsl:for-each select="cbc:StreetName">
													<cbc:StreetName>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:StreetName>
												</xsl:for-each>
												<xsl:for-each select="cbc:AdditionalStreetName">
													<cbc:AdditionalStreetName>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:AdditionalStreetName>
												</xsl:for-each>
												<xsl:for-each select="cbc:BlockName">
													<cbc:BlockName>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:BlockName>
												</xsl:for-each>
												<xsl:for-each select="cbc:BuildingName">
													<cbc:BuildingName>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:BuildingName>
												</xsl:for-each>
												<xsl:for-each select="cbc:BuildingNumber">
													<cbc:BuildingNumber>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:BuildingNumber>
												</xsl:for-each>
												<xsl:for-each select="cbc:InhouseMail">
													<cbc:InhouseMail>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:InhouseMail>
												</xsl:for-each>
												<xsl:for-each select="cbc:Department">
													<cbc:Department>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:Department>
												</xsl:for-each>
												<xsl:for-each select="cbc:MarkAttention">
													<cbc:MarkAttention>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:MarkAttention>
												</xsl:for-each>
												<xsl:for-each select="cbc:MarkCare">
													<cbc:MarkCare>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:MarkCare>
												</xsl:for-each>
												<xsl:for-each select="cbc:PlotIdentification">
													<cbc:PlotIdentification>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:PlotIdentification>
												</xsl:for-each>
												<xsl:for-each select="cbc:CitySubdivisionName">
													<cbc:CitySubdivisionName>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:CitySubdivisionName>
												</xsl:for-each>
												<xsl:for-each select="cbc:CityName">
													<cbc:CityName>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:CityName>
												</xsl:for-each>
												<xsl:for-each select="cbc:PostalZone">
													<cbc:PostalZone>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:PostalZone>
												</xsl:for-each>
												<xsl:for-each select="cbc:CountrySubentity">
													<cbc:CountrySubentity>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:CountrySubentity>
												</xsl:for-each>
												<xsl:for-each select="cbc:CountrySubentityCode">
													<cbc:CountrySubentityCode>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:CountrySubentityCode>
												</xsl:for-each>
												<xsl:for-each select="cbc:Region">
													<cbc:Region>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:Region>
												</xsl:for-each>
												<xsl:for-each select="cbc:District">
													<cbc:District>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:District>
												</xsl:for-each>
												<xsl:for-each select="cbc:TimezoneOffset">
													<cbc:TimezoneOffset>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:TimezoneOffset>
												</xsl:for-each>
												<xsl:for-each select="cac:AddressLine">
													<cac:AddressLine>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cac:AddressLine>
												</xsl:for-each>
												<xsl:for-each select="cac:Country">
													<cac:Country>
														<xsl:for-each select="cbc:IdentificationCode">
															<xsl:variable name="var147_listSchemeURI" as="node()?" select="@listSchemeURI"/>
															<xsl:variable name="var148_listURI" as="node()?" select="@listURI"/>
															<xsl:variable name="var149_languageID" as="node()?" select="@languageID"/>
															<xsl:variable name="var150_name" as="node()?" select="@name"/>
															<xsl:variable name="var151_listVersionID" as="node()?" select="@listVersionID"/>
															<xsl:variable name="var152_listName" as="node()?" select="@listName"/>
															<xsl:variable name="var153_listAgencyID" as="node()?" select="@listAgencyID"/>
															<xsl:variable name="var154_listAgencyName" as="node()?" select="@listAgencyName"/>
															<cbc:IdentificationCode>
																<xsl:attribute name="listID" namespace="" select="'ISO3166-1:Alpha2'"/>
																<xsl:if test="fn:exists($var153_listAgencyID)">
																	<xsl:attribute name="listAgencyID" namespace="" select="fn:string($var153_listAgencyID)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var154_listAgencyName)">
																	<xsl:attribute name="listAgencyName" namespace="" select="fn:string($var154_listAgencyName)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var152_listName)">
																	<xsl:attribute name="listName" namespace="" select="fn:string($var152_listName)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var151_listVersionID)">
																	<xsl:attribute name="listVersionID" namespace="" select="fn:string($var151_listVersionID)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var150_name)">
																	<xsl:attribute name="name" namespace="" select="fn:string($var150_name)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var149_languageID)">
																	<xsl:attribute name="languageID" namespace="" select="fn:string($var149_languageID)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var148_listURI)">
																	<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string($var148_listURI)))"/>
																</xsl:if>
																<xsl:if test="fn:exists($var147_listSchemeURI)">
																	<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var147_listSchemeURI)))"/>
																</xsl:if>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:IdentificationCode>
														</xsl:for-each>
														<xsl:for-each select="cbc:Name">
															<cbc:Name>
																<xsl:sequence select="(./@node(), ./node())"/>
															</cbc:Name>
														</xsl:for-each>
													</cac:Country>
												</xsl:for-each>
												<xsl:for-each select="cac:LocationCoordinate">
													<cac:LocationCoordinate>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cac:LocationCoordinate>
												</xsl:for-each>
											</cac:Address>
										</xsl:for-each>
										<xsl:for-each select="cac:SubsidiaryLocation">
											<cac:SubsidiaryLocation>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cac:SubsidiaryLocation>
										</xsl:for-each>
										<xsl:for-each select="cac:LocationCoordinate">
											<cac:LocationCoordinate>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cac:LocationCoordinate>
										</xsl:for-each>
									</cac:DeliveryLocation>
								</xsl:for-each>
								<xsl:for-each select="cac:AlternativeDeliveryLocation">
									<cac:AlternativeDeliveryLocation>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:AlternativeDeliveryLocation>
								</xsl:for-each>
								<xsl:for-each select="cac:RequestedDeliveryPeriod">
									<cac:RequestedDeliveryPeriod>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:RequestedDeliveryPeriod>
								</xsl:for-each>
								<xsl:for-each select="cac:PromisedDeliveryPeriod">
									<cac:PromisedDeliveryPeriod>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:PromisedDeliveryPeriod>
								</xsl:for-each>
								<xsl:for-each select="cac:EstimatedDeliveryPeriod">
									<cac:EstimatedDeliveryPeriod>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:EstimatedDeliveryPeriod>
								</xsl:for-each>
								<xsl:for-each select="cac:CarrierParty">
									<cac:CarrierParty>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:CarrierParty>
								</xsl:for-each>
								<xsl:for-each select="cac:DeliveryParty">
									<cac:DeliveryParty>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:DeliveryParty>
								</xsl:for-each>
								<xsl:for-each select="cac:NotifyParty">
									<cac:NotifyParty>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:NotifyParty>
								</xsl:for-each>
								<xsl:for-each select="cac:Despatch">
									<cac:Despatch>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:Despatch>
								</xsl:for-each>
								<xsl:for-each select="cac:DeliveryTerms">
									<cac:DeliveryTerms>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:DeliveryTerms>
								</xsl:for-each>
								<xsl:for-each select="cac:MinimumDeliveryUnit">
									<cac:MinimumDeliveryUnit>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:MinimumDeliveryUnit>
								</xsl:for-each>
								<xsl:for-each select="cac:MaximumDeliveryUnit">
									<cac:MaximumDeliveryUnit>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:MaximumDeliveryUnit>
								</xsl:for-each>
								<xsl:for-each select="cac:Shipment">
									<cac:Shipment>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:Shipment>
								</xsl:for-each>
							</cac:Delivery>
						</xsl:for-each>
						<xsl:for-each select="cac:PaymentTerms">
							<cac:PaymentTerms>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PaymentTerms>
						</xsl:for-each>
						<xsl:for-each select="cac:AllowanceCharge">
							<cac:AllowanceCharge>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:AllowanceCharge>
						</xsl:for-each>
						<xsl:for-each select="cac:TaxTotal">
							<cac:TaxTotal>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:TaxTotal>
						</xsl:for-each>
						<xsl:for-each select="cac:WithholdingTaxTotal">
							<cac:WithholdingTaxTotal>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:WithholdingTaxTotal>
						</xsl:for-each>
						<cac:Item>
							<xsl:for-each select="$var143_resultof_first/cbc:Description">
								<cbc:Description>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Description>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cbc:PackQuantity">
								<cbc:PackQuantity>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:PackQuantity>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cbc:PackSizeNumeric">
								<cbc:PackSizeNumeric>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:PackSizeNumeric>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cbc:CatalogueIndicator">
								<cbc:CatalogueIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:CatalogueIndicator>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cbc:HazardousRiskIndicator">
								<cbc:HazardousRiskIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:HazardousRiskIndicator>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cbc:AdditionalInformation">
								<cbc:AdditionalInformation>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:AdditionalInformation>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cbc:Keyword">
								<cbc:Keyword>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Keyword>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cbc:BrandName">
								<cbc:BrandName>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:BrandName>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cbc:ModelName">
								<cbc:ModelName>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ModelName>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:BuyersItemIdentification">
								<cac:BuyersItemIdentification>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:BuyersItemIdentification>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:SellersItemIdentification">
								<cac:SellersItemIdentification>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:SellersItemIdentification>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:ManufacturersItemIdentification">
								<cac:ManufacturersItemIdentification>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ManufacturersItemIdentification>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:StandardItemIdentification">
								<cac:StandardItemIdentification>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:StandardItemIdentification>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:CatalogueItemIdentification">
								<cac:CatalogueItemIdentification>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:CatalogueItemIdentification>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:AdditionalItemIdentification">
								<cac:AdditionalItemIdentification>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:AdditionalItemIdentification>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:CatalogueDocumentReference">
								<cac:CatalogueDocumentReference>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:CatalogueDocumentReference>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:ItemSpecificationDocumentReference">
								<cac:ItemSpecificationDocumentReference>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ItemSpecificationDocumentReference>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:OriginCountry">
								<cac:OriginCountry>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OriginCountry>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:CommodityClassification">
								<cac:CommodityClassification>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:CommodityClassification>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:TransactionConditions">
								<cac:TransactionConditions>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:TransactionConditions>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:HazardousItem">
								<cac:HazardousItem>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:HazardousItem>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:ClassifiedTaxCategory">
								<xsl:variable name="var155_resultof_first" as="node()" select="cac:TaxScheme"/>
								<cac:ClassifiedTaxCategory>
									<xsl:for-each select="cbc:ID">
										<xsl:variable name="var156_schemeURI" as="node()?" select="@schemeURI"/>
										<xsl:variable name="var157_schemeDataURI" as="node()?" select="@schemeDataURI"/>
										<xsl:variable name="var158_schemeVersionID" as="node()?" select="@schemeVersionID"/>
										<xsl:variable name="var159_schemeAgencyName" as="node()?" select="@schemeAgencyName"/>
										<xsl:variable name="var160_schemeName" as="node()?" select="@schemeName"/>
										<xsl:variable name="var161_schemeAgencyID" as="node()?" select="@schemeAgencyID"/>
										<cbc:ID>
											<xsl:attribute name="schemeID" namespace="" select="'UNCL5305'"/>
											<xsl:if test="fn:exists($var160_schemeName)">
												<xsl:attribute name="schemeName" namespace="" select="fn:string($var160_schemeName)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var161_schemeAgencyID)">
												<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string($var161_schemeAgencyID)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var159_schemeAgencyName)">
												<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string($var159_schemeAgencyName)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var158_schemeVersionID)">
												<xsl:attribute name="schemeVersionID" namespace="" select="fn:string($var158_schemeVersionID)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var157_schemeDataURI)">
												<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string($var157_schemeDataURI)))"/>
											</xsl:if>
											<xsl:if test="fn:exists($var156_schemeURI)">
												<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string($var156_schemeURI)))"/>
											</xsl:if>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:Name">
										<cbc:Name>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Name>
									</xsl:for-each>
									<xsl:for-each select="cbc:Percent">
										<cbc:Percent>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Percent>
									</xsl:for-each>
									<xsl:for-each select="cbc:BaseUnitMeasure">
										<cbc:BaseUnitMeasure>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BaseUnitMeasure>
									</xsl:for-each>
									<xsl:for-each select="cbc:PerUnitAmount">
										<cbc:PerUnitAmount>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PerUnitAmount>
									</xsl:for-each>
									<xsl:for-each select="cbc:TaxExemptionReasonCode">
										<cbc:TaxExemptionReasonCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TaxExemptionReasonCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:TaxExemptionReason">
										<cbc:TaxExemptionReason>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TaxExemptionReason>
									</xsl:for-each>
									<xsl:for-each select="cbc:TierRange">
										<cbc:TierRange>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TierRange>
									</xsl:for-each>
									<xsl:for-each select="cbc:TierRatePercent">
										<cbc:TierRatePercent>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TierRatePercent>
									</xsl:for-each>
									<cac:TaxScheme>
										<xsl:sequence select="($var155_resultof_first/@node(), $var155_resultof_first/node())"/>
									</cac:TaxScheme>
								</cac:ClassifiedTaxCategory>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:AdditionalItemProperty">
								<cac:AdditionalItemProperty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:AdditionalItemProperty>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:ManufacturerParty">
								<cac:ManufacturerParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ManufacturerParty>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:InformationContentProviderParty">
								<cac:InformationContentProviderParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:InformationContentProviderParty>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:OriginAddress">
								<cac:OriginAddress>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OriginAddress>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:ItemInstance">
								<cac:ItemInstance>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ItemInstance>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:Certificate">
								<cac:Certificate>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Certificate>
							</xsl:for-each>
							<xsl:for-each select="$var143_resultof_first/cac:Dimension">
								<cac:Dimension>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Dimension>
							</xsl:for-each>
						</cac:Item>
						<xsl:for-each select="cac:Price">
							<cac:Price>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:Price>
						</xsl:for-each>
						<xsl:for-each select="cac:DeliveryTerms">
							<cac:DeliveryTerms>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:DeliveryTerms>
						</xsl:for-each>
						<xsl:for-each select="cac:SubInvoiceLine">
							<cac:SubInvoiceLine>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:SubInvoiceLine>
						</xsl:for-each>
						<xsl:for-each select="cac:ItemPriceExtension">
							<cac:ItemPriceExtension>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:ItemPriceExtension>
						</xsl:for-each>
					</cac:InvoiceLine>
				</xsl:for-each>
			</xsl:for-each>
		</Invoice>
	</xsl:template>
</xsl:stylesheet>
